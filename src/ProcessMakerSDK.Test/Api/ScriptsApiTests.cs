/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ProcessMakerSDK.Client;
using ProcessMakerSDK.Api;
using ProcessMakerSDK.Model;

namespace ProcessMakerSDK.Test
{
    /// <summary>
    ///  Class for testing ScriptsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ScriptsApiTests
    {
        private ScriptsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ScriptsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ScriptsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ScriptsApi
            //Assert.IsInstanceOf(typeof(ScriptsApi), instance);
        }

        
        /// <summary>
        /// Test CreateScript
        /// </summary>
        [Test]
        public void CreateScriptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ScriptsEditable scriptsEditable = null;
            //var response = instance.CreateScript(scriptsEditable);
            //Assert.IsInstanceOf(typeof(Scripts), response, "response is Scripts");
        }
        
        /// <summary>
        /// Test DeleteScript
        /// </summary>
        [Test]
        public void DeleteScriptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scriptId = null;
            //var response = instance.DeleteScript(scriptId);
            //Assert.IsInstanceOf(typeof(Scripts), response, "response is Scripts");
        }
        
        /// <summary>
        /// Test DuplicateScreen
        /// </summary>
        [Test]
        public void DuplicateScreenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string screensId = null;
            //ScreensEditable screensEditable = null;
            //var response = instance.DuplicateScreen(screensId, screensEditable);
            //Assert.IsInstanceOf(typeof(Scripts), response, "response is Scripts");
        }
        
        /// <summary>
        /// Test GetScripts
        /// </summary>
        [Test]
        public void GetScriptsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //string orderBy = null;
            //string orderDirection = null;
            //int? perPage = null;
            //string include = null;
            //var response = instance.GetScripts(filter, orderBy, orderDirection, perPage, include);
            //Assert.IsInstanceOf(typeof(InlineResponse20017), response, "response is InlineResponse20017");
        }
        
        /// <summary>
        /// Test GetScriptsById
        /// </summary>
        [Test]
        public void GetScriptsByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scriptId = null;
            //var response = instance.GetScriptsById(scriptId);
            //Assert.IsInstanceOf(typeof(Scripts), response, "response is Scripts");
        }
        
        /// <summary>
        /// Test GetScriptsPreview
        /// </summary>
        [Test]
        public void GetScriptsPreviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? scriptId = null;
            //string data = null;
            //string config = null;
            //string code = null;
            //var response = instance.GetScriptsPreview(scriptId, data, config, code);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateScript
        /// </summary>
        [Test]
        public void UpdateScriptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scriptId = null;
            //ScriptsEditable scriptsEditable = null;
            //var response = instance.UpdateScript(scriptId, scriptsEditable);
            //Assert.IsInstanceOf(typeof(Scripts), response, "response is Scripts");
        }
        
    }

}
