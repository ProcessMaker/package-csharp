/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ProcessMakerSDK.Client;
using ProcessMakerSDK.Api;
using ProcessMakerSDK.Model;

namespace ProcessMakerSDK.Test
{
    /// <summary>
    ///  Class for testing FilesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FilesApiTests
    {
        private FilesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FilesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FilesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' FilesApi
            //Assert.IsInstanceOf(typeof(FilesApi), instance);
        }

        
        /// <summary>
        /// Test CreateFile
        /// </summary>
        [Test]
        public void CreateFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //InlineObject inlineObject = null;
            //int? mediaId = null;
            //string media = null;
            //var response = instance.CreateFile(requestId, inlineObject, mediaId, media);
            //Assert.IsInstanceOf(typeof(InlineResponse2003), response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test DeleteFile
        /// </summary>
        [Test]
        public void DeleteFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //instance.DeleteFile(requestId);
            
        }
        
        /// <summary>
        /// Test GetFiles
        /// </summary>
        [Test]
        public void GetFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //string filter = null;
            //string orderBy = null;
            //string orderDirection = null;
            //int? perPage = null;
            //var response = instance.GetFiles(requestId, filter, orderBy, orderDirection, perPage);
            //Assert.IsInstanceOf(typeof(InlineResponse2002), response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test GetFilesById
        /// </summary>
        [Test]
        public void GetFilesByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //string requestId = null;
            //var response = instance.GetFilesById(fileId, requestId);
            //Assert.IsInstanceOf(typeof(Groups), response, "response is Groups");
        }
        
        /// <summary>
        /// Test UpdateFile
        /// </summary>
        [Test]
        public void UpdateFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //string requestId = null;
            //InlineObject1 inlineObject1 = null;
            //var response = instance.UpdateFile(fileId, requestId, inlineObject1);
            //Assert.IsInstanceOf(typeof(InlineResponse2004), response, "response is InlineResponse2004");
        }
        
    }

}
