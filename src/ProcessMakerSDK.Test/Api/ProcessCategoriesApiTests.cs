/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ProcessMakerSDK.Client;
using ProcessMakerSDK.Api;
using ProcessMakerSDK.Model;

namespace ProcessMakerSDK.Test
{
    /// <summary>
    ///  Class for testing ProcessCategoriesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProcessCategoriesApiTests
    {
        private ProcessCategoriesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProcessCategoriesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProcessCategoriesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ProcessCategoriesApi
            //Assert.IsInstanceOf(typeof(ProcessCategoriesApi), instance);
        }

        
        /// <summary>
        /// Test CreateProcessCategory
        /// </summary>
        [Test]
        public void CreateProcessCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProcessCategoryEditable processCategoryEditable = null;
            //var response = instance.CreateProcessCategory(processCategoryEditable);
            //Assert.IsInstanceOf(typeof(ProcessCategory), response, "response is ProcessCategory");
        }
        
        /// <summary>
        /// Test DeleteProcessCategory
        /// </summary>
        [Test]
        public void DeleteProcessCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processCategoryId = null;
            //var response = instance.DeleteProcessCategory(processCategoryId);
            //Assert.IsInstanceOf(typeof(Process), response, "response is Process");
        }
        
        /// <summary>
        /// Test GetProcessCategories
        /// </summary>
        [Test]
        public void GetProcessCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //string orderBy = null;
            //string orderDirection = null;
            //int? perPage = null;
            //string include = null;
            //var response = instance.GetProcessCategories(filter, orderBy, orderDirection, perPage, include);
            //Assert.IsInstanceOf(typeof(InlineResponse20011), response, "response is InlineResponse20011");
        }
        
        /// <summary>
        /// Test GetProcessCategoryById
        /// </summary>
        [Test]
        public void GetProcessCategoryByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processCategoryId = null;
            //var response = instance.GetProcessCategoryById(processCategoryId);
            //Assert.IsInstanceOf(typeof(ProcessCategory), response, "response is ProcessCategory");
        }
        
        /// <summary>
        /// Test UpdateProcessCategory
        /// </summary>
        [Test]
        public void UpdateProcessCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processCategoryId = null;
            //ProcessCategoryEditable processCategoryEditable = null;
            //var response = instance.UpdateProcessCategory(processCategoryId, processCategoryEditable);
            //Assert.IsInstanceOf(typeof(ProcessCategory), response, "response is ProcessCategory");
        }
        
    }

}
