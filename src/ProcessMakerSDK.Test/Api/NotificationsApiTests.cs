/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ProcessMakerSDK.Client;
using ProcessMakerSDK.Api;
using ProcessMakerSDK.Model;

namespace ProcessMakerSDK.Test
{
    /// <summary>
    ///  Class for testing NotificationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class NotificationsApiTests
    {
        private NotificationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new NotificationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of NotificationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' NotificationsApi
            //Assert.IsInstanceOf(typeof(NotificationsApi), instance);
        }

        
        /// <summary>
        /// Test CreateNotification
        /// </summary>
        [Test]
        public void CreateNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NotificationsEditable notificationsEditable = null;
            //var response = instance.CreateNotification(notificationsEditable);
            //Assert.IsInstanceOf(typeof(Notifications), response, "response is Notifications");
        }
        
        /// <summary>
        /// Test DeleteNotification
        /// </summary>
        [Test]
        public void DeleteNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string notificationId = null;
            //var response = instance.DeleteNotification(notificationId);
            //Assert.IsInstanceOf(typeof(Notifications), response, "response is Notifications");
        }
        
        /// <summary>
        /// Test GetNotificationById
        /// </summary>
        [Test]
        public void GetNotificationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string notificationId = null;
            //var response = instance.GetNotificationById(notificationId);
            //Assert.IsInstanceOf(typeof(Notifications), response, "response is Notifications");
        }
        
        /// <summary>
        /// Test GetNotifications
        /// </summary>
        [Test]
        public void GetNotificationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string status = null;
            //string filter = null;
            //string orderBy = null;
            //string orderDirection = null;
            //int? perPage = null;
            //string include = null;
            //var response = instance.GetNotifications(status, filter, orderBy, orderDirection, perPage, include);
            //Assert.IsInstanceOf(typeof(InlineResponse20010), response, "response is InlineResponse20010");
        }
        
        /// <summary>
        /// Test ProcessMakerHttpControllersApiNotificationControllerUpdateAsRead
        /// </summary>
        [Test]
        public void ProcessMakerHttpControllersApiNotificationControllerUpdateAsReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject2 inlineObject2 = null;
            //instance.ProcessMakerHttpControllersApiNotificationControllerUpdateAsRead(inlineObject2);
            
        }
        
        /// <summary>
        /// Test ProcessMakerHttpControllersApiNotificationControllerUpdateAsReadAll
        /// </summary>
        [Test]
        public void ProcessMakerHttpControllersApiNotificationControllerUpdateAsReadAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject3 inlineObject3 = null;
            //instance.ProcessMakerHttpControllersApiNotificationControllerUpdateAsReadAll(inlineObject3);
            
        }
        
        /// <summary>
        /// Test UpdateNotification
        /// </summary>
        [Test]
        public void UpdateNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string notificationId = null;
            //NotificationsEditable notificationsEditable = null;
            //var response = instance.UpdateNotification(notificationId, notificationsEditable);
            //Assert.IsInstanceOf(typeof(Notifications), response, "response is Notifications");
        }
        
    }

}
