/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ProcessMakerSDK.Client;
using ProcessMakerSDK.Api;
using ProcessMakerSDK.Model;

namespace ProcessMakerSDK.Test
{
    /// <summary>
    ///  Class for testing ProcessRequestsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProcessRequestsApiTests
    {
        private ProcessRequestsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProcessRequestsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProcessRequestsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ProcessRequestsApi
            //Assert.IsInstanceOf(typeof(ProcessRequestsApi), instance);
        }

        
        /// <summary>
        /// Test DeleteProcessRequest
        /// </summary>
        [Test]
        public void DeleteProcessRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processRequestId = null;
            //var response = instance.DeleteProcessRequest(processRequestId);
            //Assert.IsInstanceOf(typeof(ProcessRequest), response, "response is ProcessRequest");
        }
        
        /// <summary>
        /// Test GetProcessRequestById
        /// </summary>
        [Test]
        public void GetProcessRequestByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processRequestId = null;
            //var response = instance.GetProcessRequestById(processRequestId);
            //Assert.IsInstanceOf(typeof(ProcessRequest), response, "response is ProcessRequest");
        }
        
        /// <summary>
        /// Test GetProcessesRequests
        /// </summary>
        [Test]
        public void GetProcessesRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string orderBy = null;
            //string orderDirection = null;
            //int? perPage = null;
            //string include = null;
            //var response = instance.GetProcessesRequests(type, orderBy, orderDirection, perPage, include);
            //Assert.IsInstanceOf(typeof(InlineResponse20014), response, "response is InlineResponse20014");
        }
        
        /// <summary>
        /// Test UpdateProcessRequest
        /// </summary>
        [Test]
        public void UpdateProcessRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processRequestId = null;
            //ProcessRequestEditable processRequestEditable = null;
            //var response = instance.UpdateProcessRequest(processRequestId, processRequestEditable);
            //Assert.IsInstanceOf(typeof(ProcessRequest), response, "response is ProcessRequest");
        }
        
    }

}
