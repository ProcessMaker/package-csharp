/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ProcessMakerSDK.Client;
using ProcessMakerSDK.Api;
using ProcessMakerSDK.Model;

namespace ProcessMakerSDK.Test
{
    /// <summary>
    ///  Class for testing ProcessesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProcessesApiTests
    {
        private ProcessesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProcessesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProcessesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ProcessesApi
            //Assert.IsInstanceOf(typeof(ProcessesApi), instance);
        }

        
        /// <summary>
        /// Test AssignmentProcess
        /// </summary>
        [Test]
        public void AssignmentProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProcessEditable processEditable = null;
            //var response = instance.AssignmentProcess(processEditable);
            //Assert.IsInstanceOf(typeof(Process), response, "response is Process");
        }
        
        /// <summary>
        /// Test CreateProcess
        /// </summary>
        [Test]
        public void CreateProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProcessEditable processEditable = null;
            //var response = instance.CreateProcess(processEditable);
            //Assert.IsInstanceOf(typeof(Process), response, "response is Process");
        }
        
        /// <summary>
        /// Test DeleteProcess
        /// </summary>
        [Test]
        public void DeleteProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //var response = instance.DeleteProcess(processId);
            //Assert.IsInstanceOf(typeof(Process), response, "response is Process");
        }
        
        /// <summary>
        /// Test ExportProcess
        /// </summary>
        [Test]
        public void ExportProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //var response = instance.ExportProcess(processId);
            //Assert.IsInstanceOf(typeof(Process), response, "response is Process");
        }
        
        /// <summary>
        /// Test GetProcessById
        /// </summary>
        [Test]
        public void GetProcessByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //var response = instance.GetProcessById(processId);
            //Assert.IsInstanceOf(typeof(Process), response, "response is Process");
        }
        
        /// <summary>
        /// Test GetProcesses
        /// </summary>
        [Test]
        public void GetProcessesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //string orderBy = null;
            //string orderDirection = null;
            //int? perPage = null;
            //string status = null;
            //string include = null;
            //var response = instance.GetProcesses(filter, orderBy, orderDirection, perPage, status, include);
            //Assert.IsInstanceOf(typeof(InlineResponse20012), response, "response is InlineResponse20012");
        }
        
        /// <summary>
        /// Test ImportProcess
        /// </summary>
        [Test]
        public void ImportProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //var response = instance.ImportProcess(file);
            //Assert.IsInstanceOf(typeof(Process), response, "response is Process");
        }
        
        /// <summary>
        /// Test RestoreProcess
        /// </summary>
        [Test]
        public void RestoreProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //ProcessEditable processEditable = null;
            //var response = instance.RestoreProcess(processId, processEditable);
            //Assert.IsInstanceOf(typeof(Process), response, "response is Process");
        }
        
        /// <summary>
        /// Test StartProcesses
        /// </summary>
        [Test]
        public void StartProcessesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orderBy = null;
            //string orderDirection = null;
            //int? perPage = null;
            //string include = null;
            //var response = instance.StartProcesses(orderBy, orderDirection, perPage, include);
            //Assert.IsInstanceOf(typeof(InlineResponse20013), response, "response is InlineResponse20013");
        }
        
        /// <summary>
        /// Test TriggerStartEvent
        /// </summary>
        [Test]
        public void TriggerStartEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string _event = null;
            //Object body = null;
            //var response = instance.TriggerStartEvent(processId, _event, body);
            //Assert.IsInstanceOf(typeof(ProcessRequest), response, "response is ProcessRequest");
        }
        
        /// <summary>
        /// Test UpdateProcess
        /// </summary>
        [Test]
        public void UpdateProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //ProcessEditable processEditable = null;
            //var response = instance.UpdateProcess(processId, processEditable);
            //Assert.IsInstanceOf(typeof(Process), response, "response is Process");
        }
        
    }

}
