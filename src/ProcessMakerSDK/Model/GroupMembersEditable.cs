/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ProcessMakerSDK.Client.OpenAPIDateConverter;

namespace ProcessMakerSDK.Model
{
    /// <summary>
    /// GroupMembersEditable
    /// </summary>
    [DataContract]
    public partial class GroupMembersEditable :  IEquatable<GroupMembersEditable>, IValidatableObject
    {
        /// <summary>
        /// Represents a group Members definition.
        /// </summary>
        /// <value>Represents a group Members definition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2

        }

        /// <summary>
        /// Represents a group Members definition.
        /// </summary>
        /// <value>Represents a group Members definition.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupMembersEditable" /> class.
        /// </summary>
        /// <param name="id">Represents a group Members definition..</param>
        /// <param name="groupId">Represents a group Members definition..</param>
        /// <param name="memberId">Represents a group Members definition..</param>
        /// <param name="memberType">Represents a group Members definition..</param>
        /// <param name="description">Represents a group Members definition..</param>
        /// <param name="status">Represents a group Members definition..</param>
        public GroupMembersEditable(string id = default(string), string groupId = default(string), string memberId = default(string), string memberType = default(string), string description = default(string), StatusEnum? status = default(StatusEnum?))
        {
            this.Id = id;
            this.GroupId = groupId;
            this.MemberId = memberId;
            this.MemberType = memberType;
            this.Description = description;
            this.Status = status;
        }
        
        /// <summary>
        /// Represents a group Members definition.
        /// </summary>
        /// <value>Represents a group Members definition.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Represents a group Members definition.
        /// </summary>
        /// <value>Represents a group Members definition.</value>
        [DataMember(Name="group_id", EmitDefaultValue=false)]
        public string GroupId { get; set; }

        /// <summary>
        /// Represents a group Members definition.
        /// </summary>
        /// <value>Represents a group Members definition.</value>
        [DataMember(Name="member_id", EmitDefaultValue=false)]
        public string MemberId { get; set; }

        /// <summary>
        /// Represents a group Members definition.
        /// </summary>
        /// <value>Represents a group Members definition.</value>
        [DataMember(Name="member_type", EmitDefaultValue=false)]
        public string MemberType { get; set; }

        /// <summary>
        /// Represents a group Members definition.
        /// </summary>
        /// <value>Represents a group Members definition.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupMembersEditable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  MemberType: ").Append(MemberType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupMembersEditable);
        }

        /// <summary>
        /// Returns true if GroupMembersEditable instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupMembersEditable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupMembersEditable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.MemberId == input.MemberId ||
                    (this.MemberId != null &&
                    this.MemberId.Equals(input.MemberId))
                ) && 
                (
                    this.MemberType == input.MemberType ||
                    (this.MemberType != null &&
                    this.MemberType.Equals(input.MemberType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.MemberId != null)
                    hashCode = hashCode * 59 + this.MemberId.GetHashCode();
                if (this.MemberType != null)
                    hashCode = hashCode * 59 + this.MemberType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
