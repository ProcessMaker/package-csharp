/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ProcessMakerSDK.Client.OpenAPIDateConverter;

namespace ProcessMakerSDK.Model
{
    /// <summary>
    /// Notifications
    /// </summary>
    [DataContract]
    public partial class Notifications :  IEquatable<Notifications>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Notifications" /> class.
        /// </summary>
        /// <param name="id">Represents a notification definition..</param>
        /// <param name="type">Represents a notification definition..</param>
        /// <param name="notifiableType">Represents a notification definition..</param>
        /// <param name="notifiableId">Represents a notification definition..</param>
        /// <param name="data">Represents a notification definition..</param>
        public Notifications(string id = default(string), string type = default(string), string notifiableType = default(string), int? notifiableId = default(int?), string data = default(string))
        {
            this.Id = id;
            this.Type = type;
            this.NotifiableType = notifiableType;
            this.NotifiableId = notifiableId;
            this.Data = data;
        }
        
        /// <summary>
        /// Represents a notification definition.
        /// </summary>
        /// <value>Represents a notification definition.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Represents a notification definition.
        /// </summary>
        /// <value>Represents a notification definition.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Represents a notification definition.
        /// </summary>
        /// <value>Represents a notification definition.</value>
        [DataMember(Name="notifiable_type", EmitDefaultValue=false)]
        public string NotifiableType { get; set; }

        /// <summary>
        /// Represents a notification definition.
        /// </summary>
        /// <value>Represents a notification definition.</value>
        [DataMember(Name="notifiable_id", EmitDefaultValue=false)]
        public int? NotifiableId { get; set; }

        /// <summary>
        /// Represents a notification definition.
        /// </summary>
        /// <value>Represents a notification definition.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Notifications {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  NotifiableType: ").Append(NotifiableType).Append("\n");
            sb.Append("  NotifiableId: ").Append(NotifiableId).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Notifications);
        }

        /// <summary>
        /// Returns true if Notifications instances are equal
        /// </summary>
        /// <param name="input">Instance of Notifications to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notifications input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.NotifiableType == input.NotifiableType ||
                    (this.NotifiableType != null &&
                    this.NotifiableType.Equals(input.NotifiableType))
                ) && 
                (
                    this.NotifiableId == input.NotifiableId ||
                    (this.NotifiableId != null &&
                    this.NotifiableId.Equals(input.NotifiableId))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.NotifiableType != null)
                    hashCode = hashCode * 59 + this.NotifiableType.GetHashCode();
                if (this.NotifiableId != null)
                    hashCode = hashCode * 59 + this.NotifiableId.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
