/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ProcessMakerSDK.Client.OpenAPIDateConverter;

namespace ProcessMakerSDK.Model
{
    /// <summary>
    /// TaskAssignmentsEditable
    /// </summary>
    [DataContract]
    public partial class TaskAssignmentsEditable :  IEquatable<TaskAssignmentsEditable>, IValidatableObject
    {
        /// <summary>
        /// Represents a business process task assignment definition.
        /// </summary>
        /// <value>Represents a business process task assignment definition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssignmentTypeEnum
        {
            /// <summary>
            /// Enum User for value: ProcessMaker\\Models\\User
            /// </summary>
            [EnumMember(Value = "ProcessMaker\\Models\\User")]
            User = 1,

            /// <summary>
            /// Enum Group for value: ProcessMaker\\Models\\Group
            /// </summary>
            [EnumMember(Value = "ProcessMaker\\Models\\Group")]
            Group = 2

        }

        /// <summary>
        /// Represents a business process task assignment definition.
        /// </summary>
        /// <value>Represents a business process task assignment definition.</value>
        [DataMember(Name="assignment_type", EmitDefaultValue=false)]
        public AssignmentTypeEnum? AssignmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAssignmentsEditable" /> class.
        /// </summary>
        /// <param name="id">Represents a business process task assignment definition..</param>
        /// <param name="processId">Represents a business process task assignment definition..</param>
        /// <param name="processTaskId">Represents a business process task assignment definition..</param>
        /// <param name="assignmentId">Represents a business process task assignment definition..</param>
        /// <param name="assignmentType">Represents a business process task assignment definition..</param>
        public TaskAssignmentsEditable(string id = default(string), string processId = default(string), string processTaskId = default(string), string assignmentId = default(string), AssignmentTypeEnum? assignmentType = default(AssignmentTypeEnum?))
        {
            this.Id = id;
            this.ProcessId = processId;
            this.ProcessTaskId = processTaskId;
            this.AssignmentId = assignmentId;
            this.AssignmentType = assignmentType;
        }
        
        /// <summary>
        /// Represents a business process task assignment definition.
        /// </summary>
        /// <value>Represents a business process task assignment definition.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Represents a business process task assignment definition.
        /// </summary>
        /// <value>Represents a business process task assignment definition.</value>
        [DataMember(Name="process_id", EmitDefaultValue=false)]
        public string ProcessId { get; set; }

        /// <summary>
        /// Represents a business process task assignment definition.
        /// </summary>
        /// <value>Represents a business process task assignment definition.</value>
        [DataMember(Name="process_task_id", EmitDefaultValue=false)]
        public string ProcessTaskId { get; set; }

        /// <summary>
        /// Represents a business process task assignment definition.
        /// </summary>
        /// <value>Represents a business process task assignment definition.</value>
        [DataMember(Name="assignment_id", EmitDefaultValue=false)]
        public string AssignmentId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskAssignmentsEditable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  ProcessTaskId: ").Append(ProcessTaskId).Append("\n");
            sb.Append("  AssignmentId: ").Append(AssignmentId).Append("\n");
            sb.Append("  AssignmentType: ").Append(AssignmentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskAssignmentsEditable);
        }

        /// <summary>
        /// Returns true if TaskAssignmentsEditable instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskAssignmentsEditable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskAssignmentsEditable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                ) && 
                (
                    this.ProcessTaskId == input.ProcessTaskId ||
                    (this.ProcessTaskId != null &&
                    this.ProcessTaskId.Equals(input.ProcessTaskId))
                ) && 
                (
                    this.AssignmentId == input.AssignmentId ||
                    (this.AssignmentId != null &&
                    this.AssignmentId.Equals(input.AssignmentId))
                ) && 
                (
                    this.AssignmentType == input.AssignmentType ||
                    (this.AssignmentType != null &&
                    this.AssignmentType.Equals(input.AssignmentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProcessId != null)
                    hashCode = hashCode * 59 + this.ProcessId.GetHashCode();
                if (this.ProcessTaskId != null)
                    hashCode = hashCode * 59 + this.ProcessTaskId.GetHashCode();
                if (this.AssignmentId != null)
                    hashCode = hashCode * 59 + this.AssignmentId.GetHashCode();
                if (this.AssignmentType != null)
                    hashCode = hashCode * 59 + this.AssignmentType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
