/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ProcessMakerSDK.Client.OpenAPIDateConverter;

namespace ProcessMakerSDK.Model
{
    /// <summary>
    /// InlineObject4
    /// </summary>
    [DataContract]
    public partial class InlineObject4 :  IEquatable<InlineObject4>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject4" /> class.
        /// </summary>
        /// <param name="userId">Id of the user whose permissions are configured.</param>
        /// <param name="groupId">Id of the group whose permissions are configured.</param>
        /// <param name="permissionsNames">Update permissions.</param>
        public InlineObject4(int? userId = default(int?), int? groupId = default(int?), List<int?> permissionsNames = default(List<int?>))
        {
            this.UserId = userId;
            this.GroupId = groupId;
            this.PermissionsNames = permissionsNames;
        }
        
        /// <summary>
        /// Id of the user whose permissions are configured
        /// </summary>
        /// <value>Id of the user whose permissions are configured</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Id of the group whose permissions are configured
        /// </summary>
        /// <value>Id of the group whose permissions are configured</value>
        [DataMember(Name="group_id", EmitDefaultValue=false)]
        public int? GroupId { get; set; }

        /// <summary>
        /// Update permissions
        /// </summary>
        /// <value>Update permissions</value>
        [DataMember(Name="permissions_names", EmitDefaultValue=false)]
        public List<int?> PermissionsNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject4 {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  PermissionsNames: ").Append(PermissionsNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject4);
        }

        /// <summary>
        /// Returns true if InlineObject4 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject4 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject4 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.PermissionsNames == input.PermissionsNames ||
                    this.PermissionsNames != null &&
                    input.PermissionsNames != null &&
                    this.PermissionsNames.SequenceEqual(input.PermissionsNames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.PermissionsNames != null)
                    hashCode = hashCode * 59 + this.PermissionsNames.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
