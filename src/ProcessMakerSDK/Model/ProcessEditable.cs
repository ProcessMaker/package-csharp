/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ProcessMakerSDK.Client.OpenAPIDateConverter;

namespace ProcessMakerSDK.Model
{
    /// <summary>
    /// ProcessEditable
    /// </summary>
    [DataContract]
    public partial class ProcessEditable :  IEquatable<ProcessEditable>, IValidatableObject
    {
        /// <summary>
        /// Represents a business process definition.
        /// </summary>
        /// <value>Represents a business process definition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2

        }

        /// <summary>
        /// Represents a business process definition.
        /// </summary>
        /// <value>Represents a business process definition.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessEditable" /> class.
        /// </summary>
        /// <param name="processCategoryId">Represents a business process definition..</param>
        /// <param name="name">Represents a business process definition..</param>
        /// <param name="description">Represents a business process definition..</param>
        /// <param name="status">Represents a business process definition..</param>
        public ProcessEditable(string processCategoryId = default(string), string name = default(string), string description = default(string), StatusEnum? status = default(StatusEnum?))
        {
            this.ProcessCategoryId = processCategoryId;
            this.Name = name;
            this.Description = description;
            this.Status = status;
        }
        
        /// <summary>
        /// Represents a business process definition.
        /// </summary>
        /// <value>Represents a business process definition.</value>
        [DataMember(Name="process_category_id", EmitDefaultValue=false)]
        public string ProcessCategoryId { get; set; }

        /// <summary>
        /// Represents a business process definition.
        /// </summary>
        /// <value>Represents a business process definition.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Represents a business process definition.
        /// </summary>
        /// <value>Represents a business process definition.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessEditable {\n");
            sb.Append("  ProcessCategoryId: ").Append(ProcessCategoryId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessEditable);
        }

        /// <summary>
        /// Returns true if ProcessEditable instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessEditable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessEditable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProcessCategoryId == input.ProcessCategoryId ||
                    (this.ProcessCategoryId != null &&
                    this.ProcessCategoryId.Equals(input.ProcessCategoryId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProcessCategoryId != null)
                    hashCode = hashCode * 59 + this.ProcessCategoryId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
