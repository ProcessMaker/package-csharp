/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ProcessMakerSDK.Client;
using ProcessMakerSDK.Model;

namespace ProcessMakerSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Save a new comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentsEditable"></param>
        /// <returns>Comments</returns>
        Comments CreateComments (CommentsEditable commentsEditable);

        /// <summary>
        /// Save a new comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentsEditable"></param>
        /// <returns>ApiResponse of Comments</returns>
        ApiResponse<Comments> CreateCommentsWithHttpInfo (CommentsEditable commentsEditable);
        /// <summary>
        /// Delete a comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>Comments</returns>
        Comments DeleteComments (string commentId);

        /// <summary>
        /// Delete a comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>ApiResponse of Comments</returns>
        ApiResponse<Comments> DeleteCommentsWithHttpInfo (string commentId);
        /// <summary>
        /// Get single comment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>Comments</returns>
        Comments GetCommentById (string commentId);

        /// <summary>
        /// Get single comment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>ApiResponse of Comments</returns>
        ApiResponse<Comments> GetCommentByIdWithHttpInfo (string commentId);
        /// <summary>
        /// Returns all comments for a given type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentableId"> (optional)</param>
        /// <param name="commentableType"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetComments (int? commentableId = null, string commentableType = null, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);

        /// <summary>
        /// Returns all comments for a given type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentableId"> (optional)</param>
        /// <param name="commentableType"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetCommentsWithHttpInfo (int? commentableId = null, string commentableType = null, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);
        /// <summary>
        /// Update a comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comment to return</param>
        /// <param name="commentsEditable"></param>
        /// <returns>Comments</returns>
        Comments UpdateComment (string commentId, CommentsEditable commentsEditable);

        /// <summary>
        /// Update a comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comment to return</param>
        /// <param name="commentsEditable"></param>
        /// <returns>ApiResponse of Comments</returns>
        ApiResponse<Comments> UpdateCommentWithHttpInfo (string commentId, CommentsEditable commentsEditable);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Save a new comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentsEditable"></param>
        /// <returns>Task of Comments</returns>
        System.Threading.Tasks.Task<Comments> CreateCommentsAsync (CommentsEditable commentsEditable);

        /// <summary>
        /// Save a new comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentsEditable"></param>
        /// <returns>Task of ApiResponse (Comments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Comments>> CreateCommentsAsyncWithHttpInfo (CommentsEditable commentsEditable);
        /// <summary>
        /// Delete a comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>Task of Comments</returns>
        System.Threading.Tasks.Task<Comments> DeleteCommentsAsync (string commentId);

        /// <summary>
        /// Delete a comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>Task of ApiResponse (Comments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Comments>> DeleteCommentsAsyncWithHttpInfo (string commentId);
        /// <summary>
        /// Get single comment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>Task of Comments</returns>
        System.Threading.Tasks.Task<Comments> GetCommentByIdAsync (string commentId);

        /// <summary>
        /// Get single comment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>Task of ApiResponse (Comments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Comments>> GetCommentByIdAsyncWithHttpInfo (string commentId);
        /// <summary>
        /// Returns all comments for a given type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentableId"> (optional)</param>
        /// <param name="commentableType"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetCommentsAsync (int? commentableId = null, string commentableType = null, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);

        /// <summary>
        /// Returns all comments for a given type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentableId"> (optional)</param>
        /// <param name="commentableType"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetCommentsAsyncWithHttpInfo (int? commentableId = null, string commentableType = null, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);
        /// <summary>
        /// Update a comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comment to return</param>
        /// <param name="commentsEditable"></param>
        /// <returns>Task of Comments</returns>
        System.Threading.Tasks.Task<Comments> UpdateCommentAsync (string commentId, CommentsEditable commentsEditable);

        /// <summary>
        /// Update a comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comment to return</param>
        /// <param name="commentsEditable"></param>
        /// <returns>Task of ApiResponse (Comments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Comments>> UpdateCommentAsyncWithHttpInfo (string commentId, CommentsEditable commentsEditable);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CommentsApi : ICommentsApi
    {
        private ProcessMakerSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CommentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommentsApi(String basePath)
        {
            this.Configuration = new ProcessMakerSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CommentsApi()
        {
            this.Configuration = ProcessMakerSDK.Client.Configuration.Default;

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CommentsApi(ProcessMakerSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ProcessMakerSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ProcessMakerSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ProcessMakerSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Save a new comment 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentsEditable"></param>
        /// <returns>Comments</returns>
        public Comments CreateComments (CommentsEditable commentsEditable)
        {
             ApiResponse<Comments> localVarResponse = CreateCommentsWithHttpInfo(commentsEditable);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Save a new comment 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentsEditable"></param>
        /// <returns>ApiResponse of Comments</returns>
        public ApiResponse< Comments > CreateCommentsWithHttpInfo (CommentsEditable commentsEditable)
        {
            // verify the required parameter 'commentsEditable' is set
            if (commentsEditable == null)
                throw new ApiException(400, "Missing required parameter 'commentsEditable' when calling CommentsApi->CreateComments");

            var localVarPath = "/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentsEditable != null && commentsEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commentsEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commentsEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Comments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Comments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Comments)));
        }

        /// <summary>
        /// Save a new comment 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentsEditable"></param>
        /// <returns>Task of Comments</returns>
        public async System.Threading.Tasks.Task<Comments> CreateCommentsAsync (CommentsEditable commentsEditable)
        {
             ApiResponse<Comments> localVarResponse = await CreateCommentsAsyncWithHttpInfo(commentsEditable);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Save a new comment 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentsEditable"></param>
        /// <returns>Task of ApiResponse (Comments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Comments>> CreateCommentsAsyncWithHttpInfo (CommentsEditable commentsEditable)
        {
            // verify the required parameter 'commentsEditable' is set
            if (commentsEditable == null)
                throw new ApiException(400, "Missing required parameter 'commentsEditable' when calling CommentsApi->CreateComments");

            var localVarPath = "/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentsEditable != null && commentsEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commentsEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commentsEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Comments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Comments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Comments)));
        }

        /// <summary>
        /// Delete a comments 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>Comments</returns>
        public Comments DeleteComments (string commentId)
        {
             ApiResponse<Comments> localVarResponse = DeleteCommentsWithHttpInfo(commentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a comments 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>ApiResponse of Comments</returns>
        public ApiResponse< Comments > DeleteCommentsWithHttpInfo (string commentId)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CommentsApi->DeleteComments");

            var localVarPath = "/comments/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentId != null) localVarPathParams.Add("comment_id", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Comments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Comments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Comments)));
        }

        /// <summary>
        /// Delete a comments 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>Task of Comments</returns>
        public async System.Threading.Tasks.Task<Comments> DeleteCommentsAsync (string commentId)
        {
             ApiResponse<Comments> localVarResponse = await DeleteCommentsAsyncWithHttpInfo(commentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a comments 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>Task of ApiResponse (Comments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Comments>> DeleteCommentsAsyncWithHttpInfo (string commentId)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CommentsApi->DeleteComments");

            var localVarPath = "/comments/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentId != null) localVarPathParams.Add("comment_id", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Comments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Comments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Comments)));
        }

        /// <summary>
        /// Get single comment by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>Comments</returns>
        public Comments GetCommentById (string commentId)
        {
             ApiResponse<Comments> localVarResponse = GetCommentByIdWithHttpInfo(commentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get single comment by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>ApiResponse of Comments</returns>
        public ApiResponse< Comments > GetCommentByIdWithHttpInfo (string commentId)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CommentsApi->GetCommentById");

            var localVarPath = "/comments/commentId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentId != null) localVarPathParams.Add("comment_id", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Comments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Comments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Comments)));
        }

        /// <summary>
        /// Get single comment by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>Task of Comments</returns>
        public async System.Threading.Tasks.Task<Comments> GetCommentByIdAsync (string commentId)
        {
             ApiResponse<Comments> localVarResponse = await GetCommentByIdAsyncWithHttpInfo(commentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get single comment by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comments to return</param>
        /// <returns>Task of ApiResponse (Comments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Comments>> GetCommentByIdAsyncWithHttpInfo (string commentId)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CommentsApi->GetCommentById");

            var localVarPath = "/comments/commentId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentId != null) localVarPathParams.Add("comment_id", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Comments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Comments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Comments)));
        }

        /// <summary>
        /// Returns all comments for a given type 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentableId"> (optional)</param>
        /// <param name="commentableType"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetComments (int? commentableId = null, string commentableType = null, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = GetCommentsWithHttpInfo(commentableId, commentableType, filter, orderBy, orderDirection, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all comments for a given type 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentableId"> (optional)</param>
        /// <param name="commentableType"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > GetCommentsWithHttpInfo (int? commentableId = null, string commentableType = null, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {

            var localVarPath = "/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentableId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "commentable_id", commentableId)); // query parameter
            if (commentableType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "commentable_type", commentableType)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Returns all comments for a given type 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentableId"> (optional)</param>
        /// <param name="commentableType"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetCommentsAsync (int? commentableId = null, string commentableType = null, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetCommentsAsyncWithHttpInfo(commentableId, commentableType, filter, orderBy, orderDirection, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all comments for a given type 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentableId"> (optional)</param>
        /// <param name="commentableType"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetCommentsAsyncWithHttpInfo (int? commentableId = null, string commentableType = null, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {

            var localVarPath = "/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentableId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "commentable_id", commentableId)); // query parameter
            if (commentableType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "commentable_type", commentableType)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Update a comment 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comment to return</param>
        /// <param name="commentsEditable"></param>
        /// <returns>Comments</returns>
        public Comments UpdateComment (string commentId, CommentsEditable commentsEditable)
        {
             ApiResponse<Comments> localVarResponse = UpdateCommentWithHttpInfo(commentId, commentsEditable);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a comment 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comment to return</param>
        /// <param name="commentsEditable"></param>
        /// <returns>ApiResponse of Comments</returns>
        public ApiResponse< Comments > UpdateCommentWithHttpInfo (string commentId, CommentsEditable commentsEditable)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CommentsApi->UpdateComment");
            // verify the required parameter 'commentsEditable' is set
            if (commentsEditable == null)
                throw new ApiException(400, "Missing required parameter 'commentsEditable' when calling CommentsApi->UpdateComment");

            var localVarPath = "/comments/commentId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentId != null) localVarPathParams.Add("comment_id", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (commentsEditable != null && commentsEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commentsEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commentsEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Comments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Comments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Comments)));
        }

        /// <summary>
        /// Update a comment 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comment to return</param>
        /// <param name="commentsEditable"></param>
        /// <returns>Task of Comments</returns>
        public async System.Threading.Tasks.Task<Comments> UpdateCommentAsync (string commentId, CommentsEditable commentsEditable)
        {
             ApiResponse<Comments> localVarResponse = await UpdateCommentAsyncWithHttpInfo(commentId, commentsEditable);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a comment 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId">ID of comment to return</param>
        /// <param name="commentsEditable"></param>
        /// <returns>Task of ApiResponse (Comments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Comments>> UpdateCommentAsyncWithHttpInfo (string commentId, CommentsEditable commentsEditable)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling CommentsApi->UpdateComment");
            // verify the required parameter 'commentsEditable' is set
            if (commentsEditable == null)
                throw new ApiException(400, "Missing required parameter 'commentsEditable' when calling CommentsApi->UpdateComment");

            var localVarPath = "/comments/commentId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentId != null) localVarPathParams.Add("comment_id", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (commentsEditable != null && commentsEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commentsEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commentsEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Comments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Comments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Comments)));
        }

    }
}
