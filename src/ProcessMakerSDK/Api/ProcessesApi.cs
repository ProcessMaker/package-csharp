/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ProcessMakerSDK.Client;
using ProcessMakerSDK.Model;

namespace ProcessMakerSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Update assignments after import
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>Process</returns>
        Process AssignmentProcess (ProcessEditable processEditable);

        /// <summary>
        /// Update assignments after import
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>ApiResponse of Process</returns>
        ApiResponse<Process> AssignmentProcessWithHttpInfo (ProcessEditable processEditable);
        /// <summary>
        /// Save a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>Process</returns>
        Process CreateProcess (ProcessEditable processEditable);

        /// <summary>
        /// Save a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>ApiResponse of Process</returns>
        ApiResponse<Process> CreateProcessWithHttpInfo (ProcessEditable processEditable);
        /// <summary>
        /// Delete a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Process</returns>
        Process DeleteProcess (string processId);

        /// <summary>
        /// Delete a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>ApiResponse of Process</returns>
        ApiResponse<Process> DeleteProcessWithHttpInfo (string processId);
        /// <summary>
        /// Export a single process by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Process</returns>
        Process ExportProcess (string processId);

        /// <summary>
        /// Export a single process by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>ApiResponse of Process</returns>
        ApiResponse<Process> ExportProcessWithHttpInfo (string processId);
        /// <summary>
        /// Get single process by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Process</returns>
        Process GetProcessById (string processId);

        /// <summary>
        /// Get single process by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>ApiResponse of Process</returns>
        ApiResponse<Process> GetProcessByIdWithHttpInfo (string processId);
        /// <summary>
        /// Returns all processes that the user has access to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional, default to active)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetProcesses (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string status = null, string include = null);

        /// <summary>
        /// Returns all processes that the user has access to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional, default to active)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetProcessesWithHttpInfo (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string status = null, string include = null);
        /// <summary>
        /// Import a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file to upload</param>
        /// <returns>Process</returns>
        Process ImportProcess (System.IO.Stream file);

        /// <summary>
        /// Import a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file to upload</param>
        /// <returns>ApiResponse of Process</returns>
        ApiResponse<Process> ImportProcessWithHttpInfo (System.IO.Stream file);
        /// <summary>
        /// Restore an inactive process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>Process</returns>
        Process RestoreProcess (string processId, ProcessEditable processEditable);

        /// <summary>
        /// Restore an inactive process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>ApiResponse of Process</returns>
        ApiResponse<Process> RestoreProcessWithHttpInfo (string processId, ProcessEditable processEditable);
        /// <summary>
        /// Returns the list of processes that the user can start
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 StartProcesses (string orderBy = null, string orderDirection = null, int? perPage = null, string include = null);

        /// <summary>
        /// Returns the list of processes that the user can start
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> StartProcessesWithHttpInfo (string orderBy = null, string orderDirection = null, int? perPage = null, string include = null);
        /// <summary>
        /// Start a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="_event">Node ID of the start event</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessRequest</returns>
        ProcessRequest TriggerStartEvent (string processId, string _event, Object body = null);

        /// <summary>
        /// Start a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="_event">Node ID of the start event</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessRequest</returns>
        ApiResponse<ProcessRequest> TriggerStartEventWithHttpInfo (string processId, string _event, Object body = null);
        /// <summary>
        /// Update a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>Process</returns>
        Process UpdateProcess (string processId, ProcessEditable processEditable);

        /// <summary>
        /// Update a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>ApiResponse of Process</returns>
        ApiResponse<Process> UpdateProcessWithHttpInfo (string processId, ProcessEditable processEditable);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Update assignments after import
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>Task of Process</returns>
        System.Threading.Tasks.Task<Process> AssignmentProcessAsync (ProcessEditable processEditable);

        /// <summary>
        /// Update assignments after import
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>Task of ApiResponse (Process)</returns>
        System.Threading.Tasks.Task<ApiResponse<Process>> AssignmentProcessAsyncWithHttpInfo (ProcessEditable processEditable);
        /// <summary>
        /// Save a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>Task of Process</returns>
        System.Threading.Tasks.Task<Process> CreateProcessAsync (ProcessEditable processEditable);

        /// <summary>
        /// Save a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>Task of ApiResponse (Process)</returns>
        System.Threading.Tasks.Task<ApiResponse<Process>> CreateProcessAsyncWithHttpInfo (ProcessEditable processEditable);
        /// <summary>
        /// Delete a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Task of Process</returns>
        System.Threading.Tasks.Task<Process> DeleteProcessAsync (string processId);

        /// <summary>
        /// Delete a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Task of ApiResponse (Process)</returns>
        System.Threading.Tasks.Task<ApiResponse<Process>> DeleteProcessAsyncWithHttpInfo (string processId);
        /// <summary>
        /// Export a single process by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Task of Process</returns>
        System.Threading.Tasks.Task<Process> ExportProcessAsync (string processId);

        /// <summary>
        /// Export a single process by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Task of ApiResponse (Process)</returns>
        System.Threading.Tasks.Task<ApiResponse<Process>> ExportProcessAsyncWithHttpInfo (string processId);
        /// <summary>
        /// Get single process by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Task of Process</returns>
        System.Threading.Tasks.Task<Process> GetProcessByIdAsync (string processId);

        /// <summary>
        /// Get single process by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Task of ApiResponse (Process)</returns>
        System.Threading.Tasks.Task<ApiResponse<Process>> GetProcessByIdAsyncWithHttpInfo (string processId);
        /// <summary>
        /// Returns all processes that the user has access to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional, default to active)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetProcessesAsync (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string status = null, string include = null);

        /// <summary>
        /// Returns all processes that the user has access to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional, default to active)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetProcessesAsyncWithHttpInfo (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string status = null, string include = null);
        /// <summary>
        /// Import a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file to upload</param>
        /// <returns>Task of Process</returns>
        System.Threading.Tasks.Task<Process> ImportProcessAsync (System.IO.Stream file);

        /// <summary>
        /// Import a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file to upload</param>
        /// <returns>Task of ApiResponse (Process)</returns>
        System.Threading.Tasks.Task<ApiResponse<Process>> ImportProcessAsyncWithHttpInfo (System.IO.Stream file);
        /// <summary>
        /// Restore an inactive process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>Task of Process</returns>
        System.Threading.Tasks.Task<Process> RestoreProcessAsync (string processId, ProcessEditable processEditable);

        /// <summary>
        /// Restore an inactive process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>Task of ApiResponse (Process)</returns>
        System.Threading.Tasks.Task<ApiResponse<Process>> RestoreProcessAsyncWithHttpInfo (string processId, ProcessEditable processEditable);
        /// <summary>
        /// Returns the list of processes that the user can start
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> StartProcessesAsync (string orderBy = null, string orderDirection = null, int? perPage = null, string include = null);

        /// <summary>
        /// Returns the list of processes that the user can start
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> StartProcessesAsyncWithHttpInfo (string orderBy = null, string orderDirection = null, int? perPage = null, string include = null);
        /// <summary>
        /// Start a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="_event">Node ID of the start event</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProcessRequest</returns>
        System.Threading.Tasks.Task<ProcessRequest> TriggerStartEventAsync (string processId, string _event, Object body = null);

        /// <summary>
        /// Start a new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="_event">Node ID of the start event</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessRequest>> TriggerStartEventAsyncWithHttpInfo (string processId, string _event, Object body = null);
        /// <summary>
        /// Update a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>Task of Process</returns>
        System.Threading.Tasks.Task<Process> UpdateProcessAsync (string processId, ProcessEditable processEditable);

        /// <summary>
        /// Update a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>Task of ApiResponse (Process)</returns>
        System.Threading.Tasks.Task<ApiResponse<Process>> UpdateProcessAsyncWithHttpInfo (string processId, ProcessEditable processEditable);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProcessesApi : IProcessesApi
    {
        private ProcessMakerSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessesApi(String basePath)
        {
            this.Configuration = new ProcessMakerSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProcessesApi()
        {
            this.Configuration = ProcessMakerSDK.Client.Configuration.Default;

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessesApi(ProcessMakerSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ProcessMakerSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ProcessMakerSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ProcessMakerSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Update assignments after import 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>Process</returns>
        public Process AssignmentProcess (ProcessEditable processEditable)
        {
             ApiResponse<Process> localVarResponse = AssignmentProcessWithHttpInfo(processEditable);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update assignments after import 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>ApiResponse of Process</returns>
        public ApiResponse< Process > AssignmentProcessWithHttpInfo (ProcessEditable processEditable)
        {
            // verify the required parameter 'processEditable' is set
            if (processEditable == null)
                throw new ApiException(400, "Missing required parameter 'processEditable' when calling ProcessesApi->AssignmentProcess");

            var localVarPath = "/processes/{process_id}/import/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processEditable != null && processEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Update assignments after import 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>Task of Process</returns>
        public async System.Threading.Tasks.Task<Process> AssignmentProcessAsync (ProcessEditable processEditable)
        {
             ApiResponse<Process> localVarResponse = await AssignmentProcessAsyncWithHttpInfo(processEditable);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update assignments after import 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>Task of ApiResponse (Process)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Process>> AssignmentProcessAsyncWithHttpInfo (ProcessEditable processEditable)
        {
            // verify the required parameter 'processEditable' is set
            if (processEditable == null)
                throw new ApiException(400, "Missing required parameter 'processEditable' when calling ProcessesApi->AssignmentProcess");

            var localVarPath = "/processes/{process_id}/import/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processEditable != null && processEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Save a new process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>Process</returns>
        public Process CreateProcess (ProcessEditable processEditable)
        {
             ApiResponse<Process> localVarResponse = CreateProcessWithHttpInfo(processEditable);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Save a new process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>ApiResponse of Process</returns>
        public ApiResponse< Process > CreateProcessWithHttpInfo (ProcessEditable processEditable)
        {
            // verify the required parameter 'processEditable' is set
            if (processEditable == null)
                throw new ApiException(400, "Missing required parameter 'processEditable' when calling ProcessesApi->CreateProcess");

            var localVarPath = "/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processEditable != null && processEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Save a new process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>Task of Process</returns>
        public async System.Threading.Tasks.Task<Process> CreateProcessAsync (ProcessEditable processEditable)
        {
             ApiResponse<Process> localVarResponse = await CreateProcessAsyncWithHttpInfo(processEditable);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Save a new process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processEditable"></param>
        /// <returns>Task of ApiResponse (Process)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Process>> CreateProcessAsyncWithHttpInfo (ProcessEditable processEditable)
        {
            // verify the required parameter 'processEditable' is set
            if (processEditable == null)
                throw new ApiException(400, "Missing required parameter 'processEditable' when calling ProcessesApi->CreateProcess");

            var localVarPath = "/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processEditable != null && processEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Delete a process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Process</returns>
        public Process DeleteProcess (string processId)
        {
             ApiResponse<Process> localVarResponse = DeleteProcessWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>ApiResponse of Process</returns>
        public ApiResponse< Process > DeleteProcessWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->DeleteProcess");

            var localVarPath = "/processes/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Delete a process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Task of Process</returns>
        public async System.Threading.Tasks.Task<Process> DeleteProcessAsync (string processId)
        {
             ApiResponse<Process> localVarResponse = await DeleteProcessAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Task of ApiResponse (Process)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Process>> DeleteProcessAsyncWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->DeleteProcess");

            var localVarPath = "/processes/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Export a single process by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Process</returns>
        public Process ExportProcess (string processId)
        {
             ApiResponse<Process> localVarResponse = ExportProcessWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export a single process by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>ApiResponse of Process</returns>
        public ApiResponse< Process > ExportProcessWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ExportProcess");

            var localVarPath = "/processes/{processId}/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Export a single process by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Task of Process</returns>
        public async System.Threading.Tasks.Task<Process> ExportProcessAsync (string processId)
        {
             ApiResponse<Process> localVarResponse = await ExportProcessAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export a single process by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Task of ApiResponse (Process)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Process>> ExportProcessAsyncWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->ExportProcess");

            var localVarPath = "/processes/{processId}/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Get single process by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Process</returns>
        public Process GetProcessById (string processId)
        {
             ApiResponse<Process> localVarResponse = GetProcessByIdWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get single process by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>ApiResponse of Process</returns>
        public ApiResponse< Process > GetProcessByIdWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->GetProcessById");

            var localVarPath = "/processes/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Get single process by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Task of Process</returns>
        public async System.Threading.Tasks.Task<Process> GetProcessByIdAsync (string processId)
        {
             ApiResponse<Process> localVarResponse = await GetProcessByIdAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get single process by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <returns>Task of ApiResponse (Process)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Process>> GetProcessByIdAsyncWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->GetProcessById");

            var localVarPath = "/processes/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Returns all processes that the user has access to 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional, default to active)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetProcesses (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string status = null, string include = null)
        {
             ApiResponse<InlineResponse20012> localVarResponse = GetProcessesWithHttpInfo(filter, orderBy, orderDirection, perPage, status, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all processes that the user has access to 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional, default to active)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse< InlineResponse20012 > GetProcessesWithHttpInfo (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string status = null, string include = null)
        {

            var localVarPath = "/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        /// Returns all processes that the user has access to 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional, default to active)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> GetProcessesAsync (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string status = null, string include = null)
        {
             ApiResponse<InlineResponse20012> localVarResponse = await GetProcessesAsyncWithHttpInfo(filter, orderBy, orderDirection, perPage, status, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all processes that the user has access to 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="status"> (optional, default to active)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetProcessesAsyncWithHttpInfo (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string status = null, string include = null)
        {

            var localVarPath = "/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        /// Import a new process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file to upload</param>
        /// <returns>Process</returns>
        public Process ImportProcess (System.IO.Stream file)
        {
             ApiResponse<Process> localVarResponse = ImportProcessWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import a new process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file to upload</param>
        /// <returns>ApiResponse of Process</returns>
        public ApiResponse< Process > ImportProcessWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling ProcessesApi->ImportProcess");

            var localVarPath = "/processes/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFormParams.Add("file", this.Configuration.ApiClient.ParameterToString(file)); // form parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Import a new process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file to upload</param>
        /// <returns>Task of Process</returns>
        public async System.Threading.Tasks.Task<Process> ImportProcessAsync (System.IO.Stream file)
        {
             ApiResponse<Process> localVarResponse = await ImportProcessAsyncWithHttpInfo(file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import a new process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file to upload</param>
        /// <returns>Task of ApiResponse (Process)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Process>> ImportProcessAsyncWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling ProcessesApi->ImportProcess");

            var localVarPath = "/processes/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFormParams.Add("file", this.Configuration.ApiClient.ParameterToString(file)); // form parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Restore an inactive process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>Process</returns>
        public Process RestoreProcess (string processId, ProcessEditable processEditable)
        {
             ApiResponse<Process> localVarResponse = RestoreProcessWithHttpInfo(processId, processEditable);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Restore an inactive process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>ApiResponse of Process</returns>
        public ApiResponse< Process > RestoreProcessWithHttpInfo (string processId, ProcessEditable processEditable)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->RestoreProcess");
            // verify the required parameter 'processEditable' is set
            if (processEditable == null)
                throw new ApiException(400, "Missing required parameter 'processEditable' when calling ProcessesApi->RestoreProcess");

            var localVarPath = "/processes/{processId}/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (processEditable != null && processEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Restore an inactive process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>Task of Process</returns>
        public async System.Threading.Tasks.Task<Process> RestoreProcessAsync (string processId, ProcessEditable processEditable)
        {
             ApiResponse<Process> localVarResponse = await RestoreProcessAsyncWithHttpInfo(processId, processEditable);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Restore an inactive process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>Task of ApiResponse (Process)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Process>> RestoreProcessAsyncWithHttpInfo (string processId, ProcessEditable processEditable)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->RestoreProcess");
            // verify the required parameter 'processEditable' is set
            if (processEditable == null)
                throw new ApiException(400, "Missing required parameter 'processEditable' when calling ProcessesApi->RestoreProcess");

            var localVarPath = "/processes/{processId}/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (processEditable != null && processEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Returns the list of processes that the user can start 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 StartProcesses (string orderBy = null, string orderDirection = null, int? perPage = null, string include = null)
        {
             ApiResponse<InlineResponse20013> localVarResponse = StartProcessesWithHttpInfo(orderBy, orderDirection, perPage, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of processes that the user can start 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > StartProcessesWithHttpInfo (string orderBy = null, string orderDirection = null, int? perPage = null, string include = null)
        {

            var localVarPath = "/start_processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartProcesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Returns the list of processes that the user can start 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> StartProcessesAsync (string orderBy = null, string orderDirection = null, int? perPage = null, string include = null)
        {
             ApiResponse<InlineResponse20013> localVarResponse = await StartProcessesAsyncWithHttpInfo(orderBy, orderDirection, perPage, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of processes that the user can start 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> StartProcessesAsyncWithHttpInfo (string orderBy = null, string orderDirection = null, int? perPage = null, string include = null)
        {

            var localVarPath = "/start_processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartProcesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Start a new process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="_event">Node ID of the start event</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessRequest</returns>
        public ProcessRequest TriggerStartEvent (string processId, string _event, Object body = null)
        {
             ApiResponse<ProcessRequest> localVarResponse = TriggerStartEventWithHttpInfo(processId, _event, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="_event">Node ID of the start event</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessRequest</returns>
        public ApiResponse< ProcessRequest > TriggerStartEventWithHttpInfo (string processId, string _event, Object body = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->TriggerStartEvent");
            // verify the required parameter '_event' is set
            if (_event == null)
                throw new ApiException(400, "Missing required parameter '_event' when calling ProcessesApi->TriggerStartEvent");

            var localVarPath = "/process_events/{process_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("process_id", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event", _event)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriggerStartEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessRequest)));
        }

        /// <summary>
        /// Start a new process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="_event">Node ID of the start event</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProcessRequest</returns>
        public async System.Threading.Tasks.Task<ProcessRequest> TriggerStartEventAsync (string processId, string _event, Object body = null)
        {
             ApiResponse<ProcessRequest> localVarResponse = await TriggerStartEventAsyncWithHttpInfo(processId, _event, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start a new process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="_event">Node ID of the start event</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessRequest>> TriggerStartEventAsyncWithHttpInfo (string processId, string _event, Object body = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->TriggerStartEvent");
            // verify the required parameter '_event' is set
            if (_event == null)
                throw new ApiException(400, "Missing required parameter '_event' when calling ProcessesApi->TriggerStartEvent");

            var localVarPath = "/process_events/{process_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("process_id", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event", _event)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriggerStartEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessRequest)));
        }

        /// <summary>
        /// Update a process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>Process</returns>
        public Process UpdateProcess (string processId, ProcessEditable processEditable)
        {
             ApiResponse<Process> localVarResponse = UpdateProcessWithHttpInfo(processId, processEditable);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>ApiResponse of Process</returns>
        public ApiResponse< Process > UpdateProcessWithHttpInfo (string processId, ProcessEditable processEditable)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->UpdateProcess");
            // verify the required parameter 'processEditable' is set
            if (processEditable == null)
                throw new ApiException(400, "Missing required parameter 'processEditable' when calling ProcessesApi->UpdateProcess");

            var localVarPath = "/processes/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (processEditable != null && processEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Update a process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>Task of Process</returns>
        public async System.Threading.Tasks.Task<Process> UpdateProcessAsync (string processId, ProcessEditable processEditable)
        {
             ApiResponse<Process> localVarResponse = await UpdateProcessAsyncWithHttpInfo(processId, processEditable);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a process 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="processEditable"></param>
        /// <returns>Task of ApiResponse (Process)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Process>> UpdateProcessAsyncWithHttpInfo (string processId, ProcessEditable processEditable)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessesApi->UpdateProcess");
            // verify the required parameter 'processEditable' is set
            if (processEditable == null)
                throw new ApiException(400, "Missing required parameter 'processEditable' when calling ProcessesApi->UpdateProcess");

            var localVarPath = "/processes/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (processEditable != null && processEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

    }
}
