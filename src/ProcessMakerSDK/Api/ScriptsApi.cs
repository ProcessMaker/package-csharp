/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ProcessMakerSDK.Client;
using ProcessMakerSDK.Model;

namespace ProcessMakerSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScriptsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Save a new script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptsEditable"></param>
        /// <returns>Scripts</returns>
        Scripts CreateScript (ScriptsEditable scriptsEditable);

        /// <summary>
        /// Save a new script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptsEditable"></param>
        /// <returns>ApiResponse of Scripts</returns>
        ApiResponse<Scripts> CreateScriptWithHttpInfo (ScriptsEditable scriptsEditable);
        /// <summary>
        /// Delete a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>Scripts</returns>
        Scripts DeleteScript (string scriptId);

        /// <summary>
        /// Delete a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>ApiResponse of Scripts</returns>
        ApiResponse<Scripts> DeleteScriptWithHttpInfo (string scriptId);
        /// <summary>
        /// duplicate a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screensId">ID of script to return</param>
        /// <param name="screensEditable"></param>
        /// <returns>Scripts</returns>
        Scripts DuplicateScreen (string screensId, ScreensEditable screensEditable);

        /// <summary>
        /// duplicate a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screensId">ID of script to return</param>
        /// <param name="screensEditable"></param>
        /// <returns>ApiResponse of Scripts</returns>
        ApiResponse<Scripts> DuplicateScreenWithHttpInfo (string screensId, ScreensEditable screensEditable);
        /// <summary>
        /// Returns all scripts that the user has access to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 GetScripts (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string include = null);

        /// <summary>
        /// Returns all scripts that the user has access to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> GetScriptsWithHttpInfo (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string include = null);
        /// <summary>
        /// Get single script by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>Scripts</returns>
        Scripts GetScriptsById (string scriptId);

        /// <summary>
        /// Get single script by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>ApiResponse of Scripts</returns>
        ApiResponse<Scripts> GetScriptsByIdWithHttpInfo (string scriptId);
        /// <summary>
        /// Test script code without saving it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId"></param>
        /// <param name="data"> (optional)</param>
        /// <param name="config"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <returns>Object</returns>
        Object GetScriptsPreview (int? scriptId, string data = null, string config = null, string code = null);

        /// <summary>
        /// Test script code without saving it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId"></param>
        /// <param name="data"> (optional)</param>
        /// <param name="config"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetScriptsPreviewWithHttpInfo (int? scriptId, string data = null, string config = null, string code = null);
        /// <summary>
        /// Update a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <param name="scriptsEditable"></param>
        /// <returns>Scripts</returns>
        Scripts UpdateScript (string scriptId, ScriptsEditable scriptsEditable);

        /// <summary>
        /// Update a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <param name="scriptsEditable"></param>
        /// <returns>ApiResponse of Scripts</returns>
        ApiResponse<Scripts> UpdateScriptWithHttpInfo (string scriptId, ScriptsEditable scriptsEditable);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Save a new script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptsEditable"></param>
        /// <returns>Task of Scripts</returns>
        System.Threading.Tasks.Task<Scripts> CreateScriptAsync (ScriptsEditable scriptsEditable);

        /// <summary>
        /// Save a new script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptsEditable"></param>
        /// <returns>Task of ApiResponse (Scripts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Scripts>> CreateScriptAsyncWithHttpInfo (ScriptsEditable scriptsEditable);
        /// <summary>
        /// Delete a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>Task of Scripts</returns>
        System.Threading.Tasks.Task<Scripts> DeleteScriptAsync (string scriptId);

        /// <summary>
        /// Delete a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>Task of ApiResponse (Scripts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Scripts>> DeleteScriptAsyncWithHttpInfo (string scriptId);
        /// <summary>
        /// duplicate a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screensId">ID of script to return</param>
        /// <param name="screensEditable"></param>
        /// <returns>Task of Scripts</returns>
        System.Threading.Tasks.Task<Scripts> DuplicateScreenAsync (string screensId, ScreensEditable screensEditable);

        /// <summary>
        /// duplicate a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screensId">ID of script to return</param>
        /// <param name="screensEditable"></param>
        /// <returns>Task of ApiResponse (Scripts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Scripts>> DuplicateScreenAsyncWithHttpInfo (string screensId, ScreensEditable screensEditable);
        /// <summary>
        /// Returns all scripts that the user has access to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> GetScriptsAsync (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string include = null);

        /// <summary>
        /// Returns all scripts that the user has access to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GetScriptsAsyncWithHttpInfo (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string include = null);
        /// <summary>
        /// Get single script by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>Task of Scripts</returns>
        System.Threading.Tasks.Task<Scripts> GetScriptsByIdAsync (string scriptId);

        /// <summary>
        /// Get single script by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>Task of ApiResponse (Scripts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Scripts>> GetScriptsByIdAsyncWithHttpInfo (string scriptId);
        /// <summary>
        /// Test script code without saving it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId"></param>
        /// <param name="data"> (optional)</param>
        /// <param name="config"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetScriptsPreviewAsync (int? scriptId, string data = null, string config = null, string code = null);

        /// <summary>
        /// Test script code without saving it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId"></param>
        /// <param name="data"> (optional)</param>
        /// <param name="config"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetScriptsPreviewAsyncWithHttpInfo (int? scriptId, string data = null, string config = null, string code = null);
        /// <summary>
        /// Update a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <param name="scriptsEditable"></param>
        /// <returns>Task of Scripts</returns>
        System.Threading.Tasks.Task<Scripts> UpdateScriptAsync (string scriptId, ScriptsEditable scriptsEditable);

        /// <summary>
        /// Update a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <param name="scriptsEditable"></param>
        /// <returns>Task of ApiResponse (Scripts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Scripts>> UpdateScriptAsyncWithHttpInfo (string scriptId, ScriptsEditable scriptsEditable);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScriptsApi : IScriptsApi
    {
        private ProcessMakerSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScriptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScriptsApi(String basePath)
        {
            this.Configuration = new ProcessMakerSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScriptsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ScriptsApi()
        {
            this.Configuration = ProcessMakerSDK.Client.Configuration.Default;

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScriptsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScriptsApi(ProcessMakerSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ProcessMakerSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ProcessMakerSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ProcessMakerSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Save a new script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptsEditable"></param>
        /// <returns>Scripts</returns>
        public Scripts CreateScript (ScriptsEditable scriptsEditable)
        {
             ApiResponse<Scripts> localVarResponse = CreateScriptWithHttpInfo(scriptsEditable);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Save a new script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptsEditable"></param>
        /// <returns>ApiResponse of Scripts</returns>
        public ApiResponse< Scripts > CreateScriptWithHttpInfo (ScriptsEditable scriptsEditable)
        {
            // verify the required parameter 'scriptsEditable' is set
            if (scriptsEditable == null)
                throw new ApiException(400, "Missing required parameter 'scriptsEditable' when calling ScriptsApi->CreateScript");

            var localVarPath = "/scripts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scriptsEditable != null && scriptsEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scriptsEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptsEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateScript", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Scripts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Scripts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scripts)));
        }

        /// <summary>
        /// Save a new script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptsEditable"></param>
        /// <returns>Task of Scripts</returns>
        public async System.Threading.Tasks.Task<Scripts> CreateScriptAsync (ScriptsEditable scriptsEditable)
        {
             ApiResponse<Scripts> localVarResponse = await CreateScriptAsyncWithHttpInfo(scriptsEditable);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Save a new script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptsEditable"></param>
        /// <returns>Task of ApiResponse (Scripts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Scripts>> CreateScriptAsyncWithHttpInfo (ScriptsEditable scriptsEditable)
        {
            // verify the required parameter 'scriptsEditable' is set
            if (scriptsEditable == null)
                throw new ApiException(400, "Missing required parameter 'scriptsEditable' when calling ScriptsApi->CreateScript");

            var localVarPath = "/scripts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scriptsEditable != null && scriptsEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scriptsEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptsEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateScript", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Scripts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Scripts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scripts)));
        }

        /// <summary>
        /// Delete a script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>Scripts</returns>
        public Scripts DeleteScript (string scriptId)
        {
             ApiResponse<Scripts> localVarResponse = DeleteScriptWithHttpInfo(scriptId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>ApiResponse of Scripts</returns>
        public ApiResponse< Scripts > DeleteScriptWithHttpInfo (string scriptId)
        {
            // verify the required parameter 'scriptId' is set
            if (scriptId == null)
                throw new ApiException(400, "Missing required parameter 'scriptId' when calling ScriptsApi->DeleteScript");

            var localVarPath = "/scripts/scriptsId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scriptId != null) localVarPathParams.Add("script_id", this.Configuration.ApiClient.ParameterToString(scriptId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScript", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Scripts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Scripts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scripts)));
        }

        /// <summary>
        /// Delete a script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>Task of Scripts</returns>
        public async System.Threading.Tasks.Task<Scripts> DeleteScriptAsync (string scriptId)
        {
             ApiResponse<Scripts> localVarResponse = await DeleteScriptAsyncWithHttpInfo(scriptId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>Task of ApiResponse (Scripts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Scripts>> DeleteScriptAsyncWithHttpInfo (string scriptId)
        {
            // verify the required parameter 'scriptId' is set
            if (scriptId == null)
                throw new ApiException(400, "Missing required parameter 'scriptId' when calling ScriptsApi->DeleteScript");

            var localVarPath = "/scripts/scriptsId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scriptId != null) localVarPathParams.Add("script_id", this.Configuration.ApiClient.ParameterToString(scriptId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScript", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Scripts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Scripts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scripts)));
        }

        /// <summary>
        /// duplicate a script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screensId">ID of script to return</param>
        /// <param name="screensEditable"></param>
        /// <returns>Scripts</returns>
        public Scripts DuplicateScreen (string screensId, ScreensEditable screensEditable)
        {
             ApiResponse<Scripts> localVarResponse = DuplicateScreenWithHttpInfo(screensId, screensEditable);
             return localVarResponse.Data;
        }

        /// <summary>
        /// duplicate a script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screensId">ID of script to return</param>
        /// <param name="screensEditable"></param>
        /// <returns>ApiResponse of Scripts</returns>
        public ApiResponse< Scripts > DuplicateScreenWithHttpInfo (string screensId, ScreensEditable screensEditable)
        {
            // verify the required parameter 'screensId' is set
            if (screensId == null)
                throw new ApiException(400, "Missing required parameter 'screensId' when calling ScriptsApi->DuplicateScreen");
            // verify the required parameter 'screensEditable' is set
            if (screensEditable == null)
                throw new ApiException(400, "Missing required parameter 'screensEditable' when calling ScriptsApi->DuplicateScreen");

            var localVarPath = "/scripts/scriptsId/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (screensId != null) localVarPathParams.Add("screens_id", this.Configuration.ApiClient.ParameterToString(screensId)); // path parameter
            if (screensEditable != null && screensEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(screensEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = screensEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DuplicateScreen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Scripts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Scripts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scripts)));
        }

        /// <summary>
        /// duplicate a script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screensId">ID of script to return</param>
        /// <param name="screensEditable"></param>
        /// <returns>Task of Scripts</returns>
        public async System.Threading.Tasks.Task<Scripts> DuplicateScreenAsync (string screensId, ScreensEditable screensEditable)
        {
             ApiResponse<Scripts> localVarResponse = await DuplicateScreenAsyncWithHttpInfo(screensId, screensEditable);
             return localVarResponse.Data;

        }

        /// <summary>
        /// duplicate a script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screensId">ID of script to return</param>
        /// <param name="screensEditable"></param>
        /// <returns>Task of ApiResponse (Scripts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Scripts>> DuplicateScreenAsyncWithHttpInfo (string screensId, ScreensEditable screensEditable)
        {
            // verify the required parameter 'screensId' is set
            if (screensId == null)
                throw new ApiException(400, "Missing required parameter 'screensId' when calling ScriptsApi->DuplicateScreen");
            // verify the required parameter 'screensEditable' is set
            if (screensEditable == null)
                throw new ApiException(400, "Missing required parameter 'screensEditable' when calling ScriptsApi->DuplicateScreen");

            var localVarPath = "/scripts/scriptsId/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (screensId != null) localVarPathParams.Add("screens_id", this.Configuration.ApiClient.ParameterToString(screensId)); // path parameter
            if (screensEditable != null && screensEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(screensEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = screensEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DuplicateScreen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Scripts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Scripts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scripts)));
        }

        /// <summary>
        /// Returns all scripts that the user has access to 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 GetScripts (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string include = null)
        {
             ApiResponse<InlineResponse20017> localVarResponse = GetScriptsWithHttpInfo(filter, orderBy, orderDirection, perPage, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all scripts that the user has access to 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse< InlineResponse20017 > GetScriptsWithHttpInfo (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string include = null)
        {

            var localVarPath = "/scripts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScripts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// Returns all scripts that the user has access to 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> GetScriptsAsync (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string include = null)
        {
             ApiResponse<InlineResponse20017> localVarResponse = await GetScriptsAsyncWithHttpInfo(filter, orderBy, orderDirection, perPage, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all scripts that the user has access to 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="include">Include data from related models in payload. Comma seperated list. (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GetScriptsAsyncWithHttpInfo (string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null, string include = null)
        {

            var localVarPath = "/scripts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScripts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// Get single script by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>Scripts</returns>
        public Scripts GetScriptsById (string scriptId)
        {
             ApiResponse<Scripts> localVarResponse = GetScriptsByIdWithHttpInfo(scriptId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get single script by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>ApiResponse of Scripts</returns>
        public ApiResponse< Scripts > GetScriptsByIdWithHttpInfo (string scriptId)
        {
            // verify the required parameter 'scriptId' is set
            if (scriptId == null)
                throw new ApiException(400, "Missing required parameter 'scriptId' when calling ScriptsApi->GetScriptsById");

            var localVarPath = "/scripts/scriptsId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scriptId != null) localVarPathParams.Add("script_id", this.Configuration.ApiClient.ParameterToString(scriptId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScriptsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Scripts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Scripts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scripts)));
        }

        /// <summary>
        /// Get single script by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>Task of Scripts</returns>
        public async System.Threading.Tasks.Task<Scripts> GetScriptsByIdAsync (string scriptId)
        {
             ApiResponse<Scripts> localVarResponse = await GetScriptsByIdAsyncWithHttpInfo(scriptId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get single script by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <returns>Task of ApiResponse (Scripts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Scripts>> GetScriptsByIdAsyncWithHttpInfo (string scriptId)
        {
            // verify the required parameter 'scriptId' is set
            if (scriptId == null)
                throw new ApiException(400, "Missing required parameter 'scriptId' when calling ScriptsApi->GetScriptsById");

            var localVarPath = "/scripts/scriptsId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scriptId != null) localVarPathParams.Add("script_id", this.Configuration.ApiClient.ParameterToString(scriptId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScriptsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Scripts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Scripts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scripts)));
        }

        /// <summary>
        /// Test script code without saving it 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId"></param>
        /// <param name="data"> (optional)</param>
        /// <param name="config"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <returns>Object</returns>
        public Object GetScriptsPreview (int? scriptId, string data = null, string config = null, string code = null)
        {
             ApiResponse<Object> localVarResponse = GetScriptsPreviewWithHttpInfo(scriptId, data, config, code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test script code without saving it 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId"></param>
        /// <param name="data"> (optional)</param>
        /// <param name="config"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetScriptsPreviewWithHttpInfo (int? scriptId, string data = null, string config = null, string code = null)
        {
            // verify the required parameter 'scriptId' is set
            if (scriptId == null)
                throw new ApiException(400, "Missing required parameter 'scriptId' when calling ScriptsApi->GetScriptsPreview");

            var localVarPath = "/scripts/{script_id}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scriptId != null) localVarPathParams.Add("script_id", this.Configuration.ApiClient.ParameterToString(scriptId)); // path parameter
            if (data != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "data", data)); // query parameter
            if (config != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "config", config)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScriptsPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Test script code without saving it 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId"></param>
        /// <param name="data"> (optional)</param>
        /// <param name="config"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetScriptsPreviewAsync (int? scriptId, string data = null, string config = null, string code = null)
        {
             ApiResponse<Object> localVarResponse = await GetScriptsPreviewAsyncWithHttpInfo(scriptId, data, config, code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test script code without saving it 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId"></param>
        /// <param name="data"> (optional)</param>
        /// <param name="config"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetScriptsPreviewAsyncWithHttpInfo (int? scriptId, string data = null, string config = null, string code = null)
        {
            // verify the required parameter 'scriptId' is set
            if (scriptId == null)
                throw new ApiException(400, "Missing required parameter 'scriptId' when calling ScriptsApi->GetScriptsPreview");

            var localVarPath = "/scripts/{script_id}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scriptId != null) localVarPathParams.Add("script_id", this.Configuration.ApiClient.ParameterToString(scriptId)); // path parameter
            if (data != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "data", data)); // query parameter
            if (config != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "config", config)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScriptsPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update a script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <param name="scriptsEditable"></param>
        /// <returns>Scripts</returns>
        public Scripts UpdateScript (string scriptId, ScriptsEditable scriptsEditable)
        {
             ApiResponse<Scripts> localVarResponse = UpdateScriptWithHttpInfo(scriptId, scriptsEditable);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <param name="scriptsEditable"></param>
        /// <returns>ApiResponse of Scripts</returns>
        public ApiResponse< Scripts > UpdateScriptWithHttpInfo (string scriptId, ScriptsEditable scriptsEditable)
        {
            // verify the required parameter 'scriptId' is set
            if (scriptId == null)
                throw new ApiException(400, "Missing required parameter 'scriptId' when calling ScriptsApi->UpdateScript");
            // verify the required parameter 'scriptsEditable' is set
            if (scriptsEditable == null)
                throw new ApiException(400, "Missing required parameter 'scriptsEditable' when calling ScriptsApi->UpdateScript");

            var localVarPath = "/scripts/scriptsId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scriptId != null) localVarPathParams.Add("script_id", this.Configuration.ApiClient.ParameterToString(scriptId)); // path parameter
            if (scriptsEditable != null && scriptsEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scriptsEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptsEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScript", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Scripts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Scripts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scripts)));
        }

        /// <summary>
        /// Update a script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <param name="scriptsEditable"></param>
        /// <returns>Task of Scripts</returns>
        public async System.Threading.Tasks.Task<Scripts> UpdateScriptAsync (string scriptId, ScriptsEditable scriptsEditable)
        {
             ApiResponse<Scripts> localVarResponse = await UpdateScriptAsyncWithHttpInfo(scriptId, scriptsEditable);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a script 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptId">ID of script to return</param>
        /// <param name="scriptsEditable"></param>
        /// <returns>Task of ApiResponse (Scripts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Scripts>> UpdateScriptAsyncWithHttpInfo (string scriptId, ScriptsEditable scriptsEditable)
        {
            // verify the required parameter 'scriptId' is set
            if (scriptId == null)
                throw new ApiException(400, "Missing required parameter 'scriptId' when calling ScriptsApi->UpdateScript");
            // verify the required parameter 'scriptsEditable' is set
            if (scriptsEditable == null)
                throw new ApiException(400, "Missing required parameter 'scriptsEditable' when calling ScriptsApi->UpdateScript");

            var localVarPath = "/scripts/scriptsId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scriptId != null) localVarPathParams.Add("script_id", this.Configuration.ApiClient.ParameterToString(scriptId)); // path parameter
            if (scriptsEditable != null && scriptsEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scriptsEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptsEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScript", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Scripts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Scripts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scripts)));
        }

    }
}
