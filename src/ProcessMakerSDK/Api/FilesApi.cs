/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ProcessMakerSDK.Client;
using ProcessMakerSDK.Model;

namespace ProcessMakerSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Save a new media file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject"></param>
        /// <param name="mediaId">ID of the model to which the file will be associated (optional)</param>
        /// <param name="media">Name of the class of the model (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 CreateFile (string requestId, InlineObject inlineObject, int? mediaId = null, string media = null);

        /// <summary>
        /// Save a new media file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject"></param>
        /// <param name="mediaId">ID of the model to which the file will be associated (optional)</param>
        /// <param name="media">Name of the class of the model (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> CreateFileWithHttpInfo (string requestId, InlineObject inlineObject, int? mediaId = null, string media = null);
        /// <summary>
        /// Delete a media file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <returns></returns>
        void DeleteFile (string requestId);

        /// <summary>
        /// Delete a media file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFileWithHttpInfo (string requestId);
        /// <summary>
        /// Returns the list of files associated to a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetFiles (string requestId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);

        /// <summary>
        /// Returns the list of files associated to a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetFilesWithHttpInfo (string requestId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);
        /// <summary>
        /// Get a file uploaded to a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to return</param>
        /// <param name="requestId">ID of the request</param>
        /// <returns>Groups</returns>
        Groups GetFilesById (string fileId, string requestId);

        /// <summary>
        /// Get a file uploaded to a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to return</param>
        /// <param name="requestId">ID of the request</param>
        /// <returns>ApiResponse of Groups</returns>
        ApiResponse<Groups> GetFilesByIdWithHttpInfo (string fileId, string requestId);
        /// <summary>
        /// Update a media file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to update</param>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject1"></param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 UpdateFile (string fileId, string requestId, InlineObject1 inlineObject1);

        /// <summary>
        /// Update a media file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to update</param>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject1"></param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> UpdateFileWithHttpInfo (string fileId, string requestId, InlineObject1 inlineObject1);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Save a new media file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject"></param>
        /// <param name="mediaId">ID of the model to which the file will be associated (optional)</param>
        /// <param name="media">Name of the class of the model (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> CreateFileAsync (string requestId, InlineObject inlineObject, int? mediaId = null, string media = null);

        /// <summary>
        /// Save a new media file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject"></param>
        /// <param name="mediaId">ID of the model to which the file will be associated (optional)</param>
        /// <param name="media">Name of the class of the model (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> CreateFileAsyncWithHttpInfo (string requestId, InlineObject inlineObject, int? mediaId = null, string media = null);
        /// <summary>
        /// Delete a media file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFileAsync (string requestId);

        /// <summary>
        /// Delete a media file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileAsyncWithHttpInfo (string requestId);
        /// <summary>
        /// Returns the list of files associated to a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetFilesAsync (string requestId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);

        /// <summary>
        /// Returns the list of files associated to a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetFilesAsyncWithHttpInfo (string requestId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);
        /// <summary>
        /// Get a file uploaded to a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to return</param>
        /// <param name="requestId">ID of the request</param>
        /// <returns>Task of Groups</returns>
        System.Threading.Tasks.Task<Groups> GetFilesByIdAsync (string fileId, string requestId);

        /// <summary>
        /// Get a file uploaded to a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to return</param>
        /// <param name="requestId">ID of the request</param>
        /// <returns>Task of ApiResponse (Groups)</returns>
        System.Threading.Tasks.Task<ApiResponse<Groups>> GetFilesByIdAsyncWithHttpInfo (string fileId, string requestId);
        /// <summary>
        /// Update a media file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to update</param>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> UpdateFileAsync (string fileId, string requestId, InlineObject1 inlineObject1);

        /// <summary>
        /// Update a media file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to update</param>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> UpdateFileAsyncWithHttpInfo (string fileId, string requestId, InlineObject1 inlineObject1);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private ProcessMakerSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(String basePath)
        {
            this.Configuration = new ProcessMakerSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// </summary>
        /// <returns></returns>
        public FilesApi()
        {
            this.Configuration = ProcessMakerSDK.Client.Configuration.Default;

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(ProcessMakerSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ProcessMakerSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ProcessMakerSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ProcessMakerSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Save a new media file 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject"></param>
        /// <param name="mediaId">ID of the model to which the file will be associated (optional)</param>
        /// <param name="media">Name of the class of the model (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 CreateFile (string requestId, InlineObject inlineObject, int? mediaId = null, string media = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = CreateFileWithHttpInfo(requestId, inlineObject, mediaId, media);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Save a new media file 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject"></param>
        /// <param name="mediaId">ID of the model to which the file will be associated (optional)</param>
        /// <param name="media">Name of the class of the model (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > CreateFileWithHttpInfo (string requestId, InlineObject inlineObject, int? mediaId = null, string media = null)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling FilesApi->CreateFile");
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject' when calling FilesApi->CreateFile");

            var localVarPath = "/requests/{request_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("request_id", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (mediaId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "media_id", mediaId)); // query parameter
            if (media != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "media", media)); // query parameter
            if (inlineObject != null && inlineObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Save a new media file 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject"></param>
        /// <param name="mediaId">ID of the model to which the file will be associated (optional)</param>
        /// <param name="media">Name of the class of the model (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> CreateFileAsync (string requestId, InlineObject inlineObject, int? mediaId = null, string media = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await CreateFileAsyncWithHttpInfo(requestId, inlineObject, mediaId, media);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Save a new media file 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject"></param>
        /// <param name="mediaId">ID of the model to which the file will be associated (optional)</param>
        /// <param name="media">Name of the class of the model (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> CreateFileAsyncWithHttpInfo (string requestId, InlineObject inlineObject, int? mediaId = null, string media = null)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling FilesApi->CreateFile");
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject' when calling FilesApi->CreateFile");

            var localVarPath = "/requests/{request_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("request_id", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (mediaId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "media_id", mediaId)); // query parameter
            if (media != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "media", media)); // query parameter
            if (inlineObject != null && inlineObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Delete a media file 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <returns></returns>
        public void DeleteFile (string requestId)
        {
             DeleteFileWithHttpInfo(requestId);
        }

        /// <summary>
        /// Delete a media file 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFileWithHttpInfo (string requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling FilesApi->DeleteFile");

            var localVarPath = "/requests/{request_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("request_id", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a media file 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFileAsync (string requestId)
        {
             await DeleteFileAsyncWithHttpInfo(requestId);

        }

        /// <summary>
        /// Delete a media file 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileAsyncWithHttpInfo (string requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling FilesApi->DeleteFile");

            var localVarPath = "/requests/{request_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("request_id", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns the list of files associated to a request 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetFiles (string requestId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
             ApiResponse<InlineResponse2002> localVarResponse = GetFilesWithHttpInfo(requestId, filter, orderBy, orderDirection, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of files associated to a request 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > GetFilesWithHttpInfo (string requestId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling FilesApi->GetFiles");

            var localVarPath = "/requests/{request_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("request_id", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Returns the list of files associated to a request 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetFilesAsync (string requestId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await GetFilesAsyncWithHttpInfo(requestId, filter, orderBy, orderDirection, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of files associated to a request 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of the request</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetFilesAsyncWithHttpInfo (string requestId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling FilesApi->GetFiles");

            var localVarPath = "/requests/{request_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("request_id", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Get a file uploaded to a request 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to return</param>
        /// <param name="requestId">ID of the request</param>
        /// <returns>Groups</returns>
        public Groups GetFilesById (string fileId, string requestId)
        {
             ApiResponse<Groups> localVarResponse = GetFilesByIdWithHttpInfo(fileId, requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a file uploaded to a request 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to return</param>
        /// <param name="requestId">ID of the request</param>
        /// <returns>ApiResponse of Groups</returns>
        public ApiResponse< Groups > GetFilesByIdWithHttpInfo (string fileId, string requestId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFilesById");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling FilesApi->GetFilesById");

            var localVarPath = "/requests/{request_id}/files/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("file_id", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (requestId != null) localVarPathParams.Add("request_id", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Groups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Groups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Groups)));
        }

        /// <summary>
        /// Get a file uploaded to a request 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to return</param>
        /// <param name="requestId">ID of the request</param>
        /// <returns>Task of Groups</returns>
        public async System.Threading.Tasks.Task<Groups> GetFilesByIdAsync (string fileId, string requestId)
        {
             ApiResponse<Groups> localVarResponse = await GetFilesByIdAsyncWithHttpInfo(fileId, requestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a file uploaded to a request 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to return</param>
        /// <param name="requestId">ID of the request</param>
        /// <returns>Task of ApiResponse (Groups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Groups>> GetFilesByIdAsyncWithHttpInfo (string fileId, string requestId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFilesById");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling FilesApi->GetFilesById");

            var localVarPath = "/requests/{request_id}/files/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("file_id", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (requestId != null) localVarPathParams.Add("request_id", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Groups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Groups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Groups)));
        }

        /// <summary>
        /// Update a media file 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to update</param>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject1"></param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 UpdateFile (string fileId, string requestId, InlineObject1 inlineObject1)
        {
             ApiResponse<InlineResponse2004> localVarResponse = UpdateFileWithHttpInfo(fileId, requestId, inlineObject1);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a media file 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to update</param>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject1"></param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > UpdateFileWithHttpInfo (string fileId, string requestId, InlineObject1 inlineObject1)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->UpdateFile");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling FilesApi->UpdateFile");
            // verify the required parameter 'inlineObject1' is set
            if (inlineObject1 == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject1' when calling FilesApi->UpdateFile");

            var localVarPath = "/requests/{request_id}/files/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("file_id", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (requestId != null) localVarPathParams.Add("request_id", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (inlineObject1 != null && inlineObject1.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject1); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject1; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Update a media file 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to update</param>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> UpdateFileAsync (string fileId, string requestId, InlineObject1 inlineObject1)
        {
             ApiResponse<InlineResponse2004> localVarResponse = await UpdateFileAsyncWithHttpInfo(fileId, requestId, inlineObject1);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a media file 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of the file to update</param>
        /// <param name="requestId">ID of the request</param>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> UpdateFileAsyncWithHttpInfo (string fileId, string requestId, InlineObject1 inlineObject1)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->UpdateFile");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling FilesApi->UpdateFile");
            // verify the required parameter 'inlineObject1' is set
            if (inlineObject1 == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject1' when calling FilesApi->UpdateFile");

            var localVarPath = "/requests/{request_id}/files/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("file_id", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (requestId != null) localVarPathParams.Add("request_id", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (inlineObject1 != null && inlineObject1.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject1); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject1; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

    }
}
