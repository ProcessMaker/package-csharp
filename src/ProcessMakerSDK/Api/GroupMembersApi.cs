/* 
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ProcessMakerSDK.Client;
using ProcessMakerSDK.Model;

namespace ProcessMakerSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupMembersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Save a new group member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMembersEditable"></param>
        /// <returns>GroupMembers</returns>
        GroupMembers CreateGroupMember (GroupMembersEditable groupMembersEditable);

        /// <summary>
        /// Save a new group member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMembersEditable"></param>
        /// <returns>ApiResponse of GroupMembers</returns>
        ApiResponse<GroupMembers> CreateGroupMemberWithHttpInfo (GroupMembersEditable groupMembersEditable);
        /// <summary>
        /// Delete a group member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group_members to return</param>
        /// <returns>GroupMembers</returns>
        GroupMembers DeleteGroupMember (string groupMemberId);

        /// <summary>
        /// Delete a group member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group_members to return</param>
        /// <returns>ApiResponse of GroupMembers</returns>
        ApiResponse<GroupMembers> DeleteGroupMemberWithHttpInfo (string groupMemberId);
        /// <summary>
        /// Get single group member by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group members to return</param>
        /// <returns>GroupMembers</returns>
        GroupMembers GetGroupMemberById (string groupMemberId);

        /// <summary>
        /// Get single group member by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group members to return</param>
        /// <returns>ApiResponse of GroupMembers</returns>
        ApiResponse<GroupMembers> GetGroupMemberByIdWithHttpInfo (string groupMemberId);
        /// <summary>
        /// Returns all groups for a given member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"> (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetGroupMembers (int? memberId = null, string orderBy = null, string orderDirection = null, int? perPage = null);

        /// <summary>
        /// Returns all groups for a given member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"> (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetGroupMembersWithHttpInfo (int? memberId = null, string orderBy = null, string orderDirection = null, int? perPage = null);
        /// <summary>
        /// Returns all groups available for a given member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">ID of group member to return</param>
        /// <param name="memberType">type of group member to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetGroupMembersAvailable (string memberId, string memberType, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);

        /// <summary>
        /// Returns all groups available for a given member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">ID of group member to return</param>
        /// <param name="memberType">type of group member to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetGroupMembersAvailableWithHttpInfo (string memberId, string memberType, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);
        /// <summary>
        /// Returns all users available for a given member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 GetUserMembersAvailable (string groupId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);

        /// <summary>
        /// Returns all users available for a given member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> GetUserMembersAvailableWithHttpInfo (string groupId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Save a new group member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMembersEditable"></param>
        /// <returns>Task of GroupMembers</returns>
        System.Threading.Tasks.Task<GroupMembers> CreateGroupMemberAsync (GroupMembersEditable groupMembersEditable);

        /// <summary>
        /// Save a new group member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMembersEditable"></param>
        /// <returns>Task of ApiResponse (GroupMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupMembers>> CreateGroupMemberAsyncWithHttpInfo (GroupMembersEditable groupMembersEditable);
        /// <summary>
        /// Delete a group member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group_members to return</param>
        /// <returns>Task of GroupMembers</returns>
        System.Threading.Tasks.Task<GroupMembers> DeleteGroupMemberAsync (string groupMemberId);

        /// <summary>
        /// Delete a group member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group_members to return</param>
        /// <returns>Task of ApiResponse (GroupMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupMembers>> DeleteGroupMemberAsyncWithHttpInfo (string groupMemberId);
        /// <summary>
        /// Get single group member by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group members to return</param>
        /// <returns>Task of GroupMembers</returns>
        System.Threading.Tasks.Task<GroupMembers> GetGroupMemberByIdAsync (string groupMemberId);

        /// <summary>
        /// Get single group member by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group members to return</param>
        /// <returns>Task of ApiResponse (GroupMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupMembers>> GetGroupMemberByIdAsyncWithHttpInfo (string groupMemberId);
        /// <summary>
        /// Returns all groups for a given member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"> (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetGroupMembersAsync (int? memberId = null, string orderBy = null, string orderDirection = null, int? perPage = null);

        /// <summary>
        /// Returns all groups for a given member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"> (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetGroupMembersAsyncWithHttpInfo (int? memberId = null, string orderBy = null, string orderDirection = null, int? perPage = null);
        /// <summary>
        /// Returns all groups available for a given member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">ID of group member to return</param>
        /// <param name="memberType">type of group member to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetGroupMembersAvailableAsync (string memberId, string memberType, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);

        /// <summary>
        /// Returns all groups available for a given member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">ID of group member to return</param>
        /// <param name="memberType">type of group member to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetGroupMembersAvailableAsyncWithHttpInfo (string memberId, string memberType, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);
        /// <summary>
        /// Returns all users available for a given member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> GetUserMembersAvailableAsync (string groupId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);

        /// <summary>
        /// Returns all users available for a given member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetUserMembersAvailableAsyncWithHttpInfo (string groupId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupMembersApi : IGroupMembersApi
    {
        private ProcessMakerSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupMembersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupMembersApi(String basePath)
        {
            this.Configuration = new ProcessMakerSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupMembersApi"/> class
        /// </summary>
        /// <returns></returns>
        public GroupMembersApi()
        {
            this.Configuration = ProcessMakerSDK.Client.Configuration.Default;

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupMembersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupMembersApi(ProcessMakerSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ProcessMakerSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ProcessMakerSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ProcessMakerSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ProcessMakerSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Save a new group member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMembersEditable"></param>
        /// <returns>GroupMembers</returns>
        public GroupMembers CreateGroupMember (GroupMembersEditable groupMembersEditable)
        {
             ApiResponse<GroupMembers> localVarResponse = CreateGroupMemberWithHttpInfo(groupMembersEditable);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Save a new group member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMembersEditable"></param>
        /// <returns>ApiResponse of GroupMembers</returns>
        public ApiResponse< GroupMembers > CreateGroupMemberWithHttpInfo (GroupMembersEditable groupMembersEditable)
        {
            // verify the required parameter 'groupMembersEditable' is set
            if (groupMembersEditable == null)
                throw new ApiException(400, "Missing required parameter 'groupMembersEditable' when calling GroupMembersApi->CreateGroupMember");

            var localVarPath = "/group_members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupMembersEditable != null && groupMembersEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupMembersEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupMembersEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroupMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupMembers)));
        }

        /// <summary>
        /// Save a new group member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMembersEditable"></param>
        /// <returns>Task of GroupMembers</returns>
        public async System.Threading.Tasks.Task<GroupMembers> CreateGroupMemberAsync (GroupMembersEditable groupMembersEditable)
        {
             ApiResponse<GroupMembers> localVarResponse = await CreateGroupMemberAsyncWithHttpInfo(groupMembersEditable);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Save a new group member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMembersEditable"></param>
        /// <returns>Task of ApiResponse (GroupMembers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupMembers>> CreateGroupMemberAsyncWithHttpInfo (GroupMembersEditable groupMembersEditable)
        {
            // verify the required parameter 'groupMembersEditable' is set
            if (groupMembersEditable == null)
                throw new ApiException(400, "Missing required parameter 'groupMembersEditable' when calling GroupMembersApi->CreateGroupMember");

            var localVarPath = "/group_members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupMembersEditable != null && groupMembersEditable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupMembersEditable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupMembersEditable; // byte array
            }

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroupMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupMembers)));
        }

        /// <summary>
        /// Delete a group member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group_members to return</param>
        /// <returns>GroupMembers</returns>
        public GroupMembers DeleteGroupMember (string groupMemberId)
        {
             ApiResponse<GroupMembers> localVarResponse = DeleteGroupMemberWithHttpInfo(groupMemberId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a group member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group_members to return</param>
        /// <returns>ApiResponse of GroupMembers</returns>
        public ApiResponse< GroupMembers > DeleteGroupMemberWithHttpInfo (string groupMemberId)
        {
            // verify the required parameter 'groupMemberId' is set
            if (groupMemberId == null)
                throw new ApiException(400, "Missing required parameter 'groupMemberId' when calling GroupMembersApi->DeleteGroupMember");

            var localVarPath = "/group_members/{group_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupMemberId != null) localVarPathParams.Add("group_member_id", this.Configuration.ApiClient.ParameterToString(groupMemberId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroupMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupMembers)));
        }

        /// <summary>
        /// Delete a group member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group_members to return</param>
        /// <returns>Task of GroupMembers</returns>
        public async System.Threading.Tasks.Task<GroupMembers> DeleteGroupMemberAsync (string groupMemberId)
        {
             ApiResponse<GroupMembers> localVarResponse = await DeleteGroupMemberAsyncWithHttpInfo(groupMemberId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a group member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group_members to return</param>
        /// <returns>Task of ApiResponse (GroupMembers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupMembers>> DeleteGroupMemberAsyncWithHttpInfo (string groupMemberId)
        {
            // verify the required parameter 'groupMemberId' is set
            if (groupMemberId == null)
                throw new ApiException(400, "Missing required parameter 'groupMemberId' when calling GroupMembersApi->DeleteGroupMember");

            var localVarPath = "/group_members/{group_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupMemberId != null) localVarPathParams.Add("group_member_id", this.Configuration.ApiClient.ParameterToString(groupMemberId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroupMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupMembers)));
        }

        /// <summary>
        /// Get single group member by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group members to return</param>
        /// <returns>GroupMembers</returns>
        public GroupMembers GetGroupMemberById (string groupMemberId)
        {
             ApiResponse<GroupMembers> localVarResponse = GetGroupMemberByIdWithHttpInfo(groupMemberId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get single group member by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group members to return</param>
        /// <returns>ApiResponse of GroupMembers</returns>
        public ApiResponse< GroupMembers > GetGroupMemberByIdWithHttpInfo (string groupMemberId)
        {
            // verify the required parameter 'groupMemberId' is set
            if (groupMemberId == null)
                throw new ApiException(400, "Missing required parameter 'groupMemberId' when calling GroupMembersApi->GetGroupMemberById");

            var localVarPath = "/group_members/{group_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupMemberId != null) localVarPathParams.Add("group_member_id", this.Configuration.ApiClient.ParameterToString(groupMemberId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupMemberById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupMembers)));
        }

        /// <summary>
        /// Get single group member by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group members to return</param>
        /// <returns>Task of GroupMembers</returns>
        public async System.Threading.Tasks.Task<GroupMembers> GetGroupMemberByIdAsync (string groupMemberId)
        {
             ApiResponse<GroupMembers> localVarResponse = await GetGroupMemberByIdAsyncWithHttpInfo(groupMemberId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get single group member by ID 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupMemberId">ID of group members to return</param>
        /// <returns>Task of ApiResponse (GroupMembers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupMembers>> GetGroupMemberByIdAsyncWithHttpInfo (string groupMemberId)
        {
            // verify the required parameter 'groupMemberId' is set
            if (groupMemberId == null)
                throw new ApiException(400, "Missing required parameter 'groupMemberId' when calling GroupMembersApi->GetGroupMemberById");

            var localVarPath = "/group_members/{group_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupMemberId != null) localVarPathParams.Add("group_member_id", this.Configuration.ApiClient.ParameterToString(groupMemberId)); // path parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupMemberById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupMembers)));
        }

        /// <summary>
        /// Returns all groups for a given member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"> (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetGroupMembers (int? memberId = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
             ApiResponse<InlineResponse2007> localVarResponse = GetGroupMembersWithHttpInfo(memberId, orderBy, orderDirection, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all groups for a given member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"> (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > GetGroupMembersWithHttpInfo (int? memberId = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {

            var localVarPath = "/group_members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_id", memberId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Returns all groups for a given member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"> (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> GetGroupMembersAsync (int? memberId = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await GetGroupMembersAsyncWithHttpInfo(memberId, orderBy, orderDirection, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all groups for a given member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"> (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetGroupMembersAsyncWithHttpInfo (int? memberId = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {

            var localVarPath = "/group_members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_id", memberId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Returns all groups available for a given member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">ID of group member to return</param>
        /// <param name="memberType">type of group member to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetGroupMembersAvailable (string memberId, string memberType, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
             ApiResponse<InlineResponse2008> localVarResponse = GetGroupMembersAvailableWithHttpInfo(memberId, memberType, filter, orderBy, orderDirection, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all groups available for a given member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">ID of group member to return</param>
        /// <param name="memberType">type of group member to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse< InlineResponse2008 > GetGroupMembersAvailableWithHttpInfo (string memberId, string memberType, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling GroupMembersApi->GetGroupMembersAvailable");
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling GroupMembersApi->GetGroupMembersAvailable");

            var localVarPath = "/group_members_available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberId != null) localVarPathParams.Add("member_id", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (memberType != null) localVarPathParams.Add("member_type", this.Configuration.ApiClient.ParameterToString(memberType)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupMembersAvailable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Returns all groups available for a given member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">ID of group member to return</param>
        /// <param name="memberType">type of group member to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> GetGroupMembersAvailableAsync (string memberId, string memberType, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
             ApiResponse<InlineResponse2008> localVarResponse = await GetGroupMembersAvailableAsyncWithHttpInfo(memberId, memberType, filter, orderBy, orderDirection, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all groups available for a given member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">ID of group member to return</param>
        /// <param name="memberType">type of group member to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetGroupMembersAvailableAsyncWithHttpInfo (string memberId, string memberType, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling GroupMembersApi->GetGroupMembersAvailable");
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling GroupMembersApi->GetGroupMembersAvailable");

            var localVarPath = "/group_members_available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberId != null) localVarPathParams.Add("member_id", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (memberType != null) localVarPathParams.Add("member_type", this.Configuration.ApiClient.ParameterToString(memberType)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupMembersAvailable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Returns all users available for a given member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 GetUserMembersAvailable (string groupId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
             ApiResponse<InlineResponse2009> localVarResponse = GetUserMembersAvailableWithHttpInfo(groupId, filter, orderBy, orderDirection, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all users available for a given member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse< InlineResponse2009 > GetUserMembersAvailableWithHttpInfo (string groupId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupMembersApi->GetUserMembersAvailable");

            var localVarPath = "/user_members_available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserMembersAvailable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Returns all users available for a given member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> GetUserMembersAvailableAsync (string groupId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
             ApiResponse<InlineResponse2009> localVarResponse = await GetUserMembersAvailableAsyncWithHttpInfo(groupId, filter, orderBy, orderDirection, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all users available for a given member 
        /// </summary>
        /// <exception cref="ProcessMakerSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="filter">Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)</param>
        /// <param name="orderBy">Field to order results by (optional)</param>
        /// <param name="orderDirection"> (optional, default to asc)</param>
        /// <param name="perPage"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetUserMembersAvailableAsyncWithHttpInfo (string groupId, string filter = null, string orderBy = null, string orderDirection = null, int? perPage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupMembersApi->GetUserMembersAvailable");

            var localVarPath = "/user_members_available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_direction", orderDirection)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (pm_api_auth_code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (pm_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserMembersAvailable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

    }
}
